(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    237341,       4546]
NotebookOptionsPosition[    236014,       4503]
NotebookOutlinePosition[    236358,       4518]
CellTagsIndexPosition[    236315,       4515]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
KN6ua+NAm7b7k1J/J7aFLpzw25eIqup/UmMeHjMUYJhJhDRGm3qsd3nKtja/
f9FQ/XeebhvRZMm1N+9jk2WMa0ISVbFUU3B34BH68x/nbj26+3dEN0Miqr/0
Nd2xsmcLKb87dtlLu10TvzuAetJfcdD5LNR1J3OK0nz9zZcuz3PmU/0XZJbR
zgbL3yiRVmVkZyEslWcyfMTh5GTLjeaMLZ1Wnh0fNb4q9UX18CvxlEXZcsYg
UbENVMZs8KcMtGu96qmYrpa1WMRpJ6frEL7GhDekA8BCpE8XN6bHQ/CuT9z3
1PlLRPrM0azf1DUn34oKu+YsezC5mmGm6xclwhxDZpwKoW9eXIdfzTtGHbvR
YEqd+S+oNznkz2bR15pVJz2QGU5KP9yxdMG1HJn6R1v6+ArBmx5l6b9Qxh1b
v/kC9ahCP3RaUX8xX63OK9B10Kkk/aSQ9fjAL3vv668Xc84G2RekAz2Klwvr
FqQDMutcf/oqsObMJ5Qh2sxr84K8vTtPPUItJSGrUr6LaGQ6k/A3RnxtCPUm
AFFtsuHv6jhDvzgPvIx89INrI+vZgeKFoS0VBl3VF0Rmnu5NXZSW6nA43TCR
Kl8vrU//PfQyqrNYdwfq1AfHdvy69bdDDzKoS171x3VNTO1EWYW21NxHXE62
0GghsSVkmZ7RiblXDBdYHuNv5fUIIx3w2cnjOoZRHOENAIJRJ54cRYVVWf+l
d7J553ZV1pe4L5/f3j2+0viKYtUhx5ML9Sg5bzIl7LqcysYcI7073nC/3tLk
yYbk5kjDEkmrXYlaxAyaP2c2//ULPZ4SDvbJW1Mp23TE5pvJeamPOx3UmPZY
ZmoMTzqQGge9Q/dzueyWWJsOGI1RPJ9LP25x6nWGXtuTPZxKL27Xp1aAkAhM
B9qEnfRh5QdQM5L03gTj0phDeWcDTqUMX7TenYQIFsy8qcl5F7U7Ympop8Zu
htPL/nBRhLNKSDrgcrKFRguJLcvTgezRj/QZ9kF/5wc1Ix0IsxPrOqZR+PAG
AGGoEk6MoeaVyr1+fcX1mwME8ucL69Gxl3eFai05FwdWoAuqPS8aM5eJLvWj
1+6JNgdS8q2UPZhkuK3wWv1ehZxBrw81TQc66oLrxmrDai5Fqbqhv72mry1t
mQ5yzwXTDwwde9g2HZg3Rv15Tw/Ka6W8Z55+FXNjbRdq6aj+1GtZuIQuNB0Y
DzOkgzy/u4/++02sGZ+SRKiLAPa8Kf/w5wQ//SxYqk73ab+cuBm1qJEt0gGX
ky00WkhsWZ4ORFF96VLL9r6Qf0PCSAe8dnK7DmEUJrwBgB9S+mZXqD6gXAOX
XDJcSZBZ15eMnnH4C+qyQpny+NS+I/fTCsaT6OIPZQ1DMhIx71mA+NZYw/VZ
rdlPzcNXcm9O17ah2z/kPp9TyzA6V8XkGye6NKA8fQEWeIS62eabQUlVblpq
tpLUqdIe7p3eyfjgr9W2z2qTCei0Bekg/3ki4+7grvGir9YcxNyBrMqKdEBV
+zVqVUglonTVRi3aBYeGrz77gfNHhMg28qQD+VODGXYd/xD2IipjiiIzI4fQ
jvb88VYOZZzKuOLBTgenEengNP7ugMPJFhqtEBBblqcD/T2Hu0k+oWGkA247
eV3HXCzChzcA8KCMP/1jMwfCo8fPt9ILbpFvjXYzRpc28/rCLvU9mw767Q01
H6lifqZjsWHecyx9wD+aaXgvpMWmwr5GTd3n0o/JSrdc8URcMKcpXy2uZ/jd
gezRdPqqp1SbHXl39NIHU+j1EYfO+xPpaymeGVR6d1wVh7YHUw3Fy54YfnnR
aOVbZf4ERLTeY7KYgEsHoijDVV3l0dcN49I8HehyLhlWjQmnoN0mP6RSi3MV
OnRV1qUDbdrpoZUJ1+E3JEJ8jG4jTzrQSe+F089QiZpTb5i8A0xK498lyRHJ
hzFvyu4bTi8VYFwex6UDU6vQljJ8xOVkC40WEFuWpwMy42QP+mJJf/EfaXw7
g/komdPO/8fnOoZRHOENAFxoM84OdiMw0NFFph8OMCxVVg67Tb38mPRnNzq6
Gy26k6bQKtOf7hpOX1PZ+y55JC78u83azBuL/Ok36RyaDF9z9MarBJFSnv74
5+aE8Wdo2rTIcXSAuw86GCcnNVn3V7ShJjKnTpveGEao7KFhCFcOu2WcH3Mv
DqAfN3qv/6g2jBeiyrAjMdQGYoqPu4Ko6pquoDYUIDOOdDC01nPAil1//rH3
yKNMTX6BHhPvmr2eof68zc9wtEurQVNmThnZs5XhQtBt9E26ZtXnPSHGF0XL
tRg0M2Lj+mXTB/tVrzfpPqYqxctF9Lqb6/DrxseOfI2hEF8dbKjFvqKnd0Dv
kTPXHnmYhH3PHN3GrFNB9KJLi23GmVDzeWtzetLpHUlfmmuSjg82rnBX6zpx
6abtv65ZEP6DdzmH1vSiOhPp3Yke9LGT6Myojt3YgsirdMf2iPDeLQzvFDt2
P5ONs0qNtJTpIy4nW2g0f2xJbo+j71+rhuPf1GEaKHkwq75xSLm3HzJl5uSh
QcYXTb0i3hluGLjs/A+f6xi+5ghvAOBC8+XX5ohEYMBwsaGM2dCOGhIeQ04a
3oLWZt/fMLiZi8mBlXyHrY6Mldrsdy6KL5ERw9t4mFvjXLdD+FH6NTydNufZ
rnF+HvTLewT1/meTAT9fTaIHlibxQDeTN++rDrkiyonsW5DxSnn0j0x5uaqz
J70CQDiVpwqo3nX2yS+GaydtxuVZfhWMx1b2CZl7+v62QJMC7V39V+ffFunI
3AfLAwwjmyhTJ3jO3oNTahkPdAnYEktZpEy8tKJX/fJ55zvUaD9q1d/vxIiq
Zu9Z16VSQU1lvH68/Z6/MTnanOd/ztIbUdHHr1lt19L5f2w0+UIa+sk+q40n
z8/2KZt/omPzpS9y3631c8r/xqnZQsMzyvQ7Gwc1Keh5B8/2Y1afep3DrEb2
eJZ3wdmEk/esxzJS/HhVZ2NjytTtMe/InYPdjb/SKN9yMZXmmVadT9Gwvjv7
aGeQuY/oZIN3snCj85zDFVv7OjsXVE5U7LInnlmKJn4PwkBV0oW57Y39Zl+z
27z9u0KNB9lVGxCZzWMnp+vm7p/G8PXtB/jwBoBCoxYlx2cwbq618qz4mBcv
PiSJVEX0c0dSJUqJe/Xo7v1nb+KSclBb9+rt+pKUY239alHS+5evPqaIWQVo
FaLMHLnQt6T0VsR9yeT50adWmvbla5qUVaZlVSEqj/u1LfX8ovacx/TVqjr7
/dWtoYaVhzb7OVbMC1GxVp7+6cOXDJnlLxbrXR73lWsXZpRVwi3FOZn+m4VG
Fy62UJCqnITPqXwG4OzkdR0TfHgDAPBdknO2G73G02pnQv4EIr5Or6a7hF4q
3IN9AAAA4B+D6v361tSCAFFt6P631PtEqtQbK9qVIYjqQw9/hdfNAQAA/j2o
Uy4t7+tleGHezqlM6dLO9YOn7bjLu1EbAAAA8D2ikaZ/jf0MK8UAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/DDQZD/9Yv/VMjJj81paUQMA5Op1W
Gv/g2IbpoR0Dxp/P/Bf7Afj+IWWfojaF92rrU7eGZ6PWweM2XktUoo/Uit4c
Xzk62K9J3VoNmnccMHvf40wNtlhlWvSZLbNC2zao7b/oqbzQVqrj/wht1rBJ
8JrXikKXxUD+bFZNQk/rnQn45vxbAefo4z7j2oqRXWpQbvDbn6L91uYAQFGh
+rQ7pAJB1J589O79C7+OrE/FfPXxlzLZQa94s7qNA+HQNuL83Wt/LQpypY70
WfREgihU9mRucyfCwcWlNHVQlXF3pYU288M6H4K2bcqDQhfGgMy5u7KPX4ew
PR9snmmKDk3yxdWLdr0tfJ7lKfgf6ZwiQHJjuCukA+D7Rpu4qzU1y/ruoC/+
xDfDqlAf/fcmMaOeTDvUQT+7uwy+JqY+pR4KtKen+juI2ZlU5ooUWp3s0dTq
tkkHyjcrvBxcqjnoS6s85oa4kKV9B0juTq5O2AedzfnHFPwPB9IB8C9AnRy1
euLIab9H02vD6tgN9EV4k3UfVaxDFYl3Du899TybHg9Zp7s76g/0WvkWs7Kk
x2bpQBE9r16FrrvPTKaKcwm9kI1Yv9WK31/YNndI+7oeLWcfP7Y6rEuTai6u
dTrNOpesNhygjL+4ZkzX5l71qlUo7+rZYmDEtTQNtVT2+cqOBcM71q/acnH0
/0s6OsKvqYHmnec9lCpjtvRtRX1q1f+3D0ptzrOd4UFNa7tXdPFoFDj5wCvM
ejop/3Rm2ZDA5g3qNmjYuN3w9Xfoey2t6NXBmb38GtZwd/Oo0yJ40q6nOVoB
dmsz720e076eW/myFdzrtew8fNOrnC8nZwdWprrJvVtYeHj4jC3/df/UxhkD
/WtXbbv+TXzUHH/3Ki2n3/r84I9lY7o0dKnQ6WAKSa0I/vpTqJ+nc93J96UY
K+Wsgu+/LnCO8e4A3Qxe75uD7gtN5tNj637s19qzeucNx7dM7OLl7uxar8OE
fW8kJOffdNrsF2wH3JVgfY61AN99xnTQct3Z/fND29av7FKlcd+1D3MgNwDf
LWTW2b7l9UFf48eHMvxRGknioz2j6xBEhYCld3M4nqzZKh3IHv1Y06X78XTp
szm19OWVDTmRzq5VlRC5ZmJbynqiRodB4T/NHN3e1bC6RLdF9nCqp/5T1UkP
ZNrcBwu9KLvG3pLoNKnXf5nc0UX/0XPGE7k+ISb+FVxG/6nZL7F0QtQk7PZ3
abHujex/s65O1re56qiTCUpVwuH++sIrDY3MYM0HpOjBwuZ2BFEn/Eyi5M2K
hvqyqk1+IMm6NpVaiGsw7VKqSpl0bgK1IF8r/HKmlttuTfJfIeX0HyZeTFbI
E89P8KwQcj75/Yl1Y2pTx9QNW7Vp06ZtRy/vXzGeLsLVz8+dXlNzHRb14uTq
MK9SxitabfajvQt7V8nvDaSV16MZBZ+4f8HMOTotrhkKbu8z+hPTF4qYPxYP
96FuOh29+4TPnRfegzZG7+fzmTKOv5HKj4fZDriei/U51gJc98ny0oFj4x4j
p8z6MdSHuhYiWmyKRWY7APjHQ4rv/1SPGiRhF9mzXB6ZRwMIwzhsO2HLtXjO
BWUbpQPJ7fHVXH84nUnqlK+XUuPbvtMB1loWhfLNsgbUiJ/znJq6yIwT3ahB
2/ZgGkndBV3Ztmzh4g3nE/UDWPZgUlX9X7w30KNZ9XFdk4IZj8yOHFCBmkS3
f6EuWL9s96/S+Y8krer92qbU1LL0NX03lBsZQiUN/31MQ1QfNrTQ/8G5L2Wv
JvHoqOZ1W409Evt6jQ9t+J+GtQZN/K421EzdbD11F8Zht+zhlGr6/5cP2vpC
pNWJn25ZvOut3uc5pzuXJkzXdIxFuPbd+Tw9I/rA8tXn9O0UXw2tULDAoYnf
3jKvN9BWxqvZBZs5R/Weoxlc3jeHoy+k9yZQ03mrXYn0nVPaqX4V6AfZVGfg
/4Z0wCcOn2MtwDrGfLFIfxftrf9Uccg1WLgEvkfUSafG6K+YKnRZ+1TEccWv
laYmJn15dXnzIOryqnSLpU8k2KNtkw5yrwxzJRzqt+vcpUuXTs0r0bnI77cv
iPdczCcknfTueJPpg7Jd9PHKziUT+rRt5E49hSC8VsVQdwDm6UCnE10dQdXS
fFOcWvUuwsej39lMkkw/HEDNJUR592oUVd3K2ZUiyvgse2meEMmUA22pw5pv
/WxiYN7ZntMfGx/RSu9N9NB/Ydf5ZBa33ZLHS1vTxhIufuG78l7lwqWDugtN
7cGmA7SVyIJNncPdDD7vm4PpC/MpX6fLOtlFf6lOuI25LeH4G8oBPD5HW4B3
DOPZQc7fgXo/OfWJEqEaBwD/ZFQJJ8L0N9+1huz/oB87pFqhVPO9Xp1zYYAz
dR018DL2AskW6YC6WHd1Cf716n2ae5FLm1Hj1WfdB/bDDeaEZDp9KL8cG+9l
Rzg0G7vh72efbk6qhk8HOskdet5osjr6/qz6nmNv6RuoTd7nR6W/jscyOc3V
fPm1OT23rH5vYh+Zsp86m6g565k8zzU/0i8utvsrneS0m2rW1/NLe9cz5IRy
AWtfySxNB/uSGekAbSUFdzrgbAZPK0z7Cd8XzLNEF/s4EdTq5SMZx99QDuA0
VoGxAO8YZjqg/QTpAPje0OY82tDDvWz9ob8/z6VDXRTVv4rXsjdK/ZBSJNw/
Hfk0jZ40Px8aH9Ci56Z3xkfH4quDK+rHR6VRN+klV5Mj87FBOiDTT4RUcBt6
OTff2sS9AXYmqzamcExIosv0zFh34QtqtpA9nMyVDnTyJzOpe5/qQf7uDeYY
ZhPZA/oU5z7HUzkfH4qvj6AXzZuvjTGxT/Z4GjUTle15OotOs2TGSXopRW+q
gtNu6bONP/0STT1EyHn6SxCVf+ss0DfBMBuVDjyZbd5083RgnMK813+k1mFM
F4vQVup07ILNnMPZDMHpgKsvGGfJn86mnhY59z+fTXL8DekADmNTsRZgHQPp
APj+USedHEctx7s079F/gIH+3X3KEA2odCB/MoOaFYlGy/RTr+T6UGr694p4
p6JTSISf/nrVsd3a19TgNzsyH+OibOWxqJdRBaFNOdjFqfLI6yY3INrkPztR
TxRr/sT6cZvytWFCmv3MuFxhmD52Jmh1uRf7ltP/39F/2fnnTy5sD29ub5IO
PqxtYraqoNMpXi6qR1+Ne6/Ju0xUfvilHXWFXq7N9P3XX8S8vh+5a15o6IY3
zKcn8pfLm9Kn1h+66cy9Z4+uHFo1efb5hA+/dS5LEA7tN8foT5C/2+SvN6B8
j31f1dx2Zx0LKNfYcKmqfBfhpZ/dgg/rJyTRhV7Uo4tKA/Y8/fQl7qtIayzC
OMEZUcWsoh6SElUHrj9x/vT+lX0qE3mvBqOtTNOyCjZ3jioO3wyOVpjD1Rem
U74m8/ayNvoJ3DFg4zsFz990CAfgjeWwAOcYyfVhrgV3Wrqcvw3p4CKkA+D7
QXJrlGE1ngGdDlRxvwfpU0CVvgepHyVoUi8tDPIsTZSq6FnTzZ6wq95p8q7H
hrdOGUfS5YY3q17J0VhaeY+6HZc9t/QnU8p36zsajKvUet5jWV65PhWNpdrX
HmXyJE/1cceAhmXoPzg0Gnbky6eDg+rZ0R9dvIcdis95/nPHCgZjGg9ctmUK
PduX8wr9LWpzv0blDOV5tpt51/irOlXMz431V8ntdsUXrCFrs5/8Prp5Xu2E
a9N+8w+9QjxnUaffXj+wUXnjYc5ePX86GCPTkeJXf0xq61GmrEfDBh5O5Wt2
mXXsvZTks/u/I4fV1v/RuWaThm6liErtpp9OpK/0k06MbepCH1Wubtf5f63p
Xd9YhGfLAVvzL2w1ScdH1qK/L+URMHHZ+LrUf+08uyx7KsNYySj4yAamczDN
4PG++fs3Ukxf7IpVGad8wtHVrWLZMq41W/Zdcu5z/to/7m/Kd5uRDsD5nMsC
lGOe3ZgfUL2UoTmtZtzLePlzFw/Dn6u2mXYH9UNMAPgOIVUSqdrssyglLiY2
WaRiToPMI0sepCo3JTmHZbilaGXpCck5St5iNJL01GwF69d8ypy0DIll+z2Q
yuz4Dx8TshXmdZIqqZS/NVp5ZlIavkKUlQIKtqYZ5lWg+yL/DiBBY9HfLDeW
LxrQ3QcAAAAUCxwPoDn/BgAAAHw/aNIfH1vUhnpAU234tsinGRqBfwMAAAC+
KxQfDkYsMLIw4q+PSoF/AwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+GZoRbFP36SrGN+qku/+uWpK
6OCIZ7JvYpUBtG0WFvEuctuC0QMmHU1Q28osmxgmoCxb1sIqOzv61C+zhw+Y
eSmTtEl5JTeMrAuBvAbhHKUv9fy2+fpSjyVqeAsrEX6wEcyGF2WUllhkT5b1
9m/l28q/25htbxXUN2T21R+79loVLac+qOIOjO/q5+vrFzTpuC3nnSJHem+C
O1G64+F080lBkXD3+FI/B+d+l0TfyDAd1jaL0GS/ito1ztPOa1WM7SLWFobx
l2XLWlhoMp6d2zygsn3r3UlaGxRXksPIqhDIb5Aa4yitvtQdI6vbef38nr/U
wvpB9eXw1J7tqOmn6+CIxxLqK/nrLaOD27Zq2co/eNyOGIVVxVoFo+FFGqUl
mezIvs5lgo5nGNudc76/M0HUnPVMbvisiJ7fvNOuBP5LBQza3Hd33+RYODat
OskMVeqjCzdiJSSrNNGlfhUqfNNxbGab9ag/b2nmaFk64HOrIMME9g22A2zU
fCyKlwvrOtooHRRfGFkV8VaEgEmDcI5SfVzXxAGfDswtLawfVO9/9ipVNfy+
tOAryi7Cc8YTubVlWm2LacOLOEpLLNrUQ50cXQddNvSo6Mrwhi0Cq9vVW/yK
Ts2ar7938It4ZwgNUpmdki7hywwaSXpiqth4L6GKWePXbNFL0zSvlWcnfU3M
kpuGIamSSlSkTpWdnC7Vok6yGFItlSi1bBMK4lctSk0Vqfj6G2UtuzKD+TqN
ND0lW2leJKKAAts4C+X2tnEueKdQZCcnZZlWSiozE1Jkxi9IRWZCquEDv1tN
DcO0iVEIri58B9io+Xmw3Mua5UhlTkqqmF0QXYHU3A7zOORoBT6M8v0mSc+Q
afOMzExlxoUZqK5B2WeO5SFg2iBEOtDKM+K/Jj7/uTE+HTAs5R5O/H1ITcGl
q099ZLLapHy9tH6pgutRHWYMmk0zyC8ExxCy4YwoRc8DqNhixRD6bKvipBjQ
fN7awr5q+D0qQUtujm3S58jNpQ3svegcQGac6NXsx4cyUvxyV1hA+94jRvfx
re078Vg8euVI9eXQGL8WQcPCQtvXqTPoUurbrQPrlyZKefoHBQf3nXcj+38e
rR/oH9B75MTR3eq6NBh7Nk1LnXNkWteadvbtd51bEVCeIOpPntvP9KQcc++I
n6wb2qIcUap27yWX0zT6dLWzbfn686P14Sl5ui7Uq7xbhx8PPfh7fkh9Bzvf
7fEaBcOEnJxL/ZwdvEeGdfOpWcmBICoGbX2vRPuFzEVYi2gybT5RZ9jE3i3q
VClDEGXbrHgmxRWgSY402vZ/0m5FDPQuS9jX7x9xO0ur+nJsZmd3F+/Qnx+K
NEK8Tc0Fpcq16tM/pKtfnXKlXQPmX0rV6JQf9kxo60qUp0eoImZHmF9FouLg
a2IdyxGMoCswLF6DbZN5IbP2bR6PrMu0LPNT5hw9PM82zcf2j+ksp04+OyOw
edDYWVMHtq7v5ds+sEvIlFPJGlIUvWNkqyaBQyaM7tnKu9uiC0kqdhw2XHbt
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
Pc9W8l8C+spSvkdBKTL7xrzQxXfz3sjXKvUjhh46CplEJJLy7pduMdqUszPC
tr3j3+zdKnW0Iuj1okLQqPkeQ67YUSdd2zWnkzPh0GLC+hNvxDYKacn9ma2D
f3/3+fLq8EUXUzHBVghBpcIrXxWl5BG+9chaLVKhMsFG8l+C+spCvkNBKTLt
RGj7JQXbfGhzX53a+mNrR8LZf+T02dPG9Ghcyd1v6ukkofOxKuXWlqmzz6Zy
i2nkXgvvNPcx3+WSFepoRdHrRYWgUfMdhty3QfZwco3yQadYG/FZDZl+PNit
NXpfB5sJKglRvjKvrJiEubhaj6uVR4UKS+HlvzittZ5/oKAUtyiZ9N64ml2O
MW7DxNeHulUedt3wCyTxncnVCQ8zcS8kpDT27yV9Wnq1GbHhOkbMwAR13Hpf
v01xvEnGMnW0Iur1okLQqPkHhlxJhEw71N7JsP2VdeezlJvkT2Z6lkFs9Kqz
paASeyZkyQ6ZV8YnzEWqcpMT0iSWSiqxms/RekStOBUqZM288l8IVahCWStM
EQ6pCyVE9ozdSC5tOROjlBKZmjooI53VWKSQGMovjMq59eJE50Pcel1k/PJU
8/W3Fk4FWzBlHe9o7zzwMvrnqbTZ2c/2TuncuHHnKXufZQvN4GTSb02qz37J
Nzrx6miGUswbi+p1QQpx7KKYYPoGVZIA0be8A4WMGgF6fsZa0RJ5Zq3gC3vB
gmaINuJ9IeiH4UWL7NGPnhW6n8nmP5IJUllKk3p5WW9PgnDy6cyU3rKpoJLp
TIgSLTKv7Kc9qweghLnooayvbXeYv2+PsBmTetR0b7f8iUSQBajmc7SeqUiF
U6FC1swv/8VWhSqctcIU4VC6UMefnuFVfcvJZTWSQ1vOBPnrLSP93AjHZoP6
t2ng6VpaX/bQ3e9k2HBE+YXtYT69OOnNUIdGu1IZ30puDHf3GH3LuAui/Ons
uhWDDiajZhBl4rX1Q1s38Om16NQHqYXXr8pXP7nVWMV3f4BWR0M2ltXrSAU2
lkLcijcKnjGB6RtESUpEX2mzkMEyYM7aGT34Ro0gPT8dViLPtBH8YS9U0AwV
j0hfCFVvKw7I1D/bOTVc/oZ5+aHJfHb6j/0H/vhj/759f5y8Qcn1ME7EKjdJ
703wKNP5dI6OhQ0FlUzTAVq0yLwy7Nb7ZM71cE+XrvuoXhBfCa3o2HbbJyW/
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
0Y0YcWwYA8CydjFh14g+kznqmJA51ybUcGqzNZZqJ5l9ZVz1cu3oD9J7+p7p
fDoHc570Xni1Mv47DblSfHNSl3lP5AI75UNOgrlNBZMEmXM93NOl6z5qxhdf
Ca3o2HZbbAaqTEEOt3DeEN/9sa6z3/rX9Oj41otFRjtLe6/7KHo8s2mXfUla
/cQyzdPBd9sX8bPZLbodSkk/2a2MXeOwpasoVk7v4kKgx70qZnXTUg7Nwv98
Lcq7PkVHhSrr/bXNP7ja+RqWCKn6HU3uD/lCSe/B6yMqO4f8nUmqYzf3GLLj
lw4VvNd8UJFpR/t0WEWvbHGng4K109xz3Z3cRqBncx5zs+m/SW6MqFSm6xlU
9JKZGL+ZFqCJ/93XIW9pjiqsXPfIXINlwWVdh98wWpYbFVqBaLb5k5rRGvWn
Lb6OtedQT3pyL4d1mIN+lKpN2tPavuokejrWJu/1s3c3LlQzPY9uMMYUizyp
eOw8/x0jxrUJO3zL+lCr/ZrkI0ODI15yXPjrdFmngpw9w8+8jIl59+ZV9LNX
XyXsmyDJ9f6l6+xI4yrGCG8EoVvH16cGT2KPwmGZJwqiGzHiEIWz0oEF7WLC
qhFzJs8YJjOOBzmUavtH3v2i7NHU6kTtuc8VfOlAJ386q5aj71Z9+Okn6ZHB
6/SpW1insGeCfDdS1pQp1zvSWCmp0ZCYMgU5PN9XQuYNMutMT2fX0Khc4znf
Ph3oRJcHVbRv8+v5uc0Dtn+lLJfenVjV0X/7jbVt/DfFyT6u97b3DD/5KDqP
FzEpcuS1jjLxyuoB+rudCq3G7YymXihk9IAqMWpNWEjXHiPm/7p1dA0HlJ90
QtIBNSe5ug25khmzvvuYi5kJ+9q7tNwcl/r3wI4Rb+k7X8Hp4HxIefwkJsBc
ya1Rbph0oMb5zbQAbeKuVo756eDWqMrodKB8vbS+Xf0lr5TM1miTDgSWqzr+
tij1WGjQelwUqb/sCnKtNuTQ+6zkW0taunrPf2R4fsb0PLrBGFMs8aROdt91
ZRxzBImvDansMea2OPvylOAFD7hzsiJ6Xl3noJPca8qSW6H2NbcmCXk2yBdB
6NYJ6lN8z2OxxBNm0c0acWw40wFfuxCVm9eIOZNnDFNnEeUHXM57mKSO2+hD
lKOs4ksHVPw1cGi6/qMi5a/QvnsoHwjrFI50QBVQymOi6bN8bJkCHG7RvKF8
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
AHSuAFFL+o/Ed3w0bAsCFhiJF4tEajQqlUarJ0m9TmvaB0AmkyvpmzMr7y4I
nBRj5W4H4iBxpuYUPz65cdGU4b27dTWpb9hZwLcqQkg1SHShiA+MZXpC49Hz
YFbpXylNUVaWlPOEisUbMx8Jw3I5JDbTOMEJDDGKEWJkTs5JbniiRDVXdgtO
UqPiD06dQoE3rKjcIuXylPM/SqbufVWpd7uSxoZ0DL0q8DkMg4qljh+0/SXq
y09eohaZeWBIn03IZVktilK+ubR+0qQdiRWx3YE1IuUpDogufcHTu69kpOLG
F+17bwMuhnQxoQSngh5i6vgVKwJRw5Of9eas4MR6H0QWJSScuxCfX9EwZ5tF
FcTMHTDvEvw1uT7/DoOKpc1jL1XhOZOHqKV7d3jiyE1PHT9DU3L58/PnHjp5
X0xbZAyuc/aPLjL9j4+rEd69JDOWn0ypHIlRKDhNEUYPMW1eamo2Uniyo5oh
nfOCEwvLxaRNi9p5KgX6Z9JqKhacqEVJpY8O7L9bgG+RnSlKnZ+WwX0u5NLi
D05jhFkJbYNHNSV9hIMTCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL
CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL
CwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsL
CwsLS5woRdrzHK2dy1Smv8jR2LdMLKxKK23mzcNr50k+C49TOq1OUvr83M5l
08fPOZmuRz9Lm/HP+lnDewYOXxqdAzyNryukNPnhs1yrJhOyMD7i5yWTxy/6
J5+y5ny0pjjBDxXhaj6JaQ9VeGWpZOVNqdkDepVcrtJoNSqFTKEt9YleJZMr
1Rq1Uq7Ucc4m1XLTX7VarUatUirkMmmxTGk+k8yKXBi687kaVq8VceNqZhYp
9uC0YeQ4SEb3K8zul0tlatJOhdo0u7icyKwT41r7z7suE3ui+t3NUz8EunmO
/UfqiHYBRRY+id49tVk1v3UvkMNMfntR9+Bdz1Nj1oetuJANdBhPVxS3Zjci
qvb7M9eKCV2fF3d22/gG1bv/nmGP2IM0xQl+qAhX8wm9PVTOX5Le3z8unbR1
2Vd/nRvoTtQMnL8jKkVV+tu13Qv7ehJeQSvOpLGDiiyMO7V1th9B1OkhmRY6
c1bo56O6NW339QPzqVTx5bD+394Hj3Fr4sZqM2vf/Dl/xMfdArr1HPxZ+H25
6SfV0+3Tg3t169qtZ/DM3UnQpGVPsQanLSPHMdJlXN77TX9Pwq3L7M1/PZPZ
pV22zS4uJ/3bXR97GMN97NkCmnnI4uc3nxWB5jDGX6T/jK1Tx8m91L7a9KEb
ejqgck8Fe3ff/Y7rKGYfoV3RZt87fyVZbmXsqBO+a1XDTumA0RQn+KHCXc0n
tPYobs30HXSScW9WFDWiTpPZtxSWX0wXRF1nxxRCXFz4d1DtZnPvls76uld7
Fp3MLDWKLmVzQODWFO5NhQE9bhDDUEjaF+v8qjQJu03rlyn2CJ+FJbnLOWIM
TttGjmOkvDu3ee2giAI7FQefXVx79MCkffVT3wE/bhzk4R50LKt8ztImbQjs
vCIBcE3B/IullzppdrZUy/I8pSnMypXzPNXhHEBpFXJTKXpFblahhh1IpCov
7W36o3UdoOnAXKCCPveqHizyqdn3L67/WX2Ed4XSKeSa8iL18tz0bBlwAjC3
sDDjbXqBqvxwTjqgNEVZ2TKuTbgtL7eGtjCz9C+WpiD7odyi8tw8JVnWyvxs
rnX5DWSjq0Hd5nTPADCg8SeN+SmOXpGXS7O7QHtKDzo33HvkBeZ9r/rx8lbu
fY6VX7NSxVfm9ZockQNL2Jpnq9rV6nM0p+x4XVG2zOLNjF8/bLYkAfgOAS1u
kMPQXCTcyqaJuGqz+fdo9yqapz+0qeK7OM6SDgDWBbQM1FTBoQwanEwLgGu3
JTLExzaVc7S3R5vvn1j50oczSKGzi6jRI2xcJ0nzbHWPoH1pOZFj6rj13P3W
3CJ14o5P21Qlqvj0DAoOHrP0SlF52zl/MfbS063j1NAh/r713QiiXtCOFyWG
pmQJe0P79B41ZfrogJYBX5xMY48D7gHaN8e/Guxbjfjg8y9GdfmgYU2CcO+x
Oq70YkfzNmrF0M6Bw6eGhX0e1LoawU0HlDR+99RuHw6YOHv6iG4dh6w4n2E8
QJ8ds2qUD0F4+A9kdoXbR2BX9JlRy4a3casW8Fua3nRLfjQksEvQ56GS3h98
MIGV6qnie5s/7dln1NQvpg9pVbftjMiS+YWeDnSZkQsHfBQ0Y/H8T7u38Qvo
PWDQ8HkRmXpgy0utUb333rOr+9QmiHarLkeUN4XT+iKgH8os2nLSrOH+Pl7V
CaLZuI27f5gQ+EEj4/2ge8/wePizTMQqUFwN6vaJO0eZ3Vv9TA0woOrp9qmB
3kSNzhPG9Wjr41WVqN5m0u/Pza2Ghh5NiqsSt/Z7s1ljL/fPvh6tvit7fqR8
tGrAuINp8LFYeGZonRaLHkIusTVPvvZuvpZ9f4AaNxwrQ7slaGWBdAAOT07L
AE0VrBk4OJkWgAwOGyLDythW3vvSp87QM4VQb8MEGqTQ2QV99Agb15lSPfwm
YOhh461v8cXPvar4byydY8mM37vXaPUd4O6A9RdT8Nb4eNujAq2Bkt9f1qpq
y6XxapP3r81p9UHYlWKjfaiCqPFe9SXnGLfikAOMd3JNq3UMv5NjzO7qxI2d
qnpPu2p6ECq7+WUrz8DNT80eBj4sooouz27u0WNHsulXqvDizGa1Pi75j+LW
7MY1B/5dJNATWFdMF4dta3Q1BbXq/le+9ceZhog+7cDksIvMdFAUNcbLo9ce
U/DLr89oWKP/yXzTz7R0UHRB4lX3k79NTy7UT1a2qdn1Z9MsAm+5yRqER+CC
U89z0x7ceimjLE1B9IOhzKK3s9UUVXBhijfRaMrJV8aLW/XzTZ2rNZp5U2GA
yk6uhnSb271CsAGLzwbXrDXkQLKKMt5+313dza1aty0vtTxdpgVF2ubGbtPv
sOcF5Z05zeqOOl9cEky/jByx4xXPg0d1worWVRqOXPjd8qXffL3wq292xjGf
ORdF9HQbEMl9CoAYN2hhKGxl87AganabtXJ1ub6f29eTKE0HwPDktIzbVOGa
oYOTFq7gwWFjZFgR21T24Y892v34TOzNAXSQwmYXtNGD4FZnSnErrFX72b/+
efz48f3Lulcnyq6ZxKQDyyOx4rNDPbynGOdvKv/0kJrVOoT+sNakNQsG1SWY
YxV2gMnBNfr+VZK75Vem1K85+EyR0VBnRnh6SaKLS04GpQMq71SQW5Veh8ou
BJX35jcjWn77SC0qHQC6Qg9qbdL6TlXcOocdfirleROgLXhxedsnXtUCSh4o
WtIBmbGve/Umc8yzE5n5R2D1RqYH2DwtL7WG5UaUNx0AG8+wqD5tV4Bb65VP
1GXWrTU0qhjeEfu4GtJtA6B7YAMa04G71+Qr8pI/FkdL6hCdt73Wwbtskfr+
DDfPZc85r4ff7Q5w9zc98ddnHp8UHJ7A+2y9ICLI0yfsTEJS0vNnT+LjnryV
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
fyGqrlB/iOzTYLLH7yfAE3ihlMcE6SsLJsEpeSN9g7rW6C2YrDlb/xIsNOn9
/PsXZD8StuZ+Hl+3xUzPDzbMWWu7hEQt9Dx1afhV5Si058OgNIGKT3n+yY1z
+jYUakRPWr7jQhHzxyvm299O6xbdb86nR9JziI+sutFnbJsREyTUiRkwcvS4
CRPGJQ0f0Cuq2SDpOxBzTqUz8uAvX9A9ioB2k881yfJgAnMl10K6gGCn57lM
3kUiM4NHvJnDId50XFDG7NQ3+8bEDxnYs20jx4X45xGuq8kIqHIfXtTp9Ngy
OoLnDfQIkmC4FpWjJYrlSJo6qgmQPw1WY1mZ0Wy1Woxl+jKzcowlxybHTiQY
tNR7/LhMkD7TG7JkpOzWVLXgCwij8Ivu0WIoLS0zWcxGfYmecz8Sa9HPXy9/
5bnEXl27OImfvidfMQJTmd5gMlttVotzs5PSEl1JqcHMGhHLo8idALABHi+u
8kyrWke8XSTUUvr9jFaRkw67nxe3GW7uGNW4kecGRIMqFwkcf2ghobXk+v7F
SeM3XeN65hxBkABgzdkcF9RoXKrnyzhLzpfPRI/cnoOfEFVz/uBCQmvhL/tS
LxTgE80IUp2w3js8Py68bqt+46a/OHX8mPELtnJ85odUNSgkRBDEL5iL865f
uZGvxzqAIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCICr4f2mmrc4=

     "], {{0, 504}, {517, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 1],
    Selectable->False],
   BaseStyle->"ImageGraphics",
   ImageSize->Magnification[1],
   ImageSizeRaw->{517, 504},
   PlotRange->{{0, 517}, {0, 504}}]]],
 "\n",
 StyleBox["Source: \[OpenCurlyDoubleQuote]Ef\[FiLigature]cient computation of \
rank probabilities in posets\[CloseCurlyDoubleQuote] by Karel De Loof",
  FontFamily->"Courier New",
  FontSize->9]
}], "Text",
 CellChangeTimes->{{3.589432813358097*^9, 3.589432827020846*^9}, {
  3.5894329309991627`*^9, 3.58943294659816*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\n", 
  RowBox[{
   RowBox[{
    RowBox[{"init", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"G_", ",", "L_"}], "}"}], ",", " ", "x_"}], "]"}], ":=", " ", 
    "\n", "\t", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"System`EdgeAdd", "[", 
       RowBox[{"G", ",", " ", 
        RowBox[{
         RowBox[{"{", "}"}], " ", "\[DirectedEdge]", " ", 
         RowBox[{"{", "x", "}"}]}]}], "]"}], ",", "\n", "\t", 
      RowBox[{"Append", "[", 
       RowBox[{"L", ",", " ", 
        RowBox[{"{", "x", "}"}]}], "]"}]}], "}"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"go", "[", "P_", "]"}], " ", ":=", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"G", ",", "L", ",", "i"}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"G", ",", "L"}], "}"}], " ", "=", " ", 
        RowBox[{"Fold", "[", 
         RowBox[{"init", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"System`Graph", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"{", "}"}], "}"}], ",", 
              RowBox[{"{", "}"}], ",", " ", 
              RowBox[{"VertexLabels", "->", "\"\<Name\>\""}]}], "]"}], ",", 
            RowBox[{"{", "}"}]}], "}"}], ",", " ", 
          RowBox[{"minimalElements", "[", "P", "]"}]}], "]"}]}], ";", "\n", 
       "\n", "\t", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "L", "]"}], " ", "!=", " ", "0"}], ",", " ", 
         "\n", "\t\t", 
         RowBox[{
          RowBox[{"i", " ", "=", " ", 
           RowBox[{"L", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", "\t\t", 
          RowBox[{"L", " ", "=", " ", 
           RowBox[{"L", "[", 
            RowBox[{"[", 
             RowBox[{"2", ";;"}], "]"}], "]"}]}], ";", "\n", "\t\t", 
          RowBox[{
           RowBox[{"stuff", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"g_", ",", "l_"}], "}"}], ",", "x_"}], "]"}], " ", ":=",
            " ", 
           RowBox[{"With", "[", "\n", "\t\t\t", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i2", "=", 
               RowBox[{"Union", "[", 
                RowBox[{"i", ",", 
                 RowBox[{"{", "x", "}"}]}], "]"}]}], "}"}], ",", " ", "\n", 
             "\t\t\t", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"Not", "[", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{"l", ",", "i2"}], "]"}], "]"}], ",", " ", "\n", 
               "\t\t\t\t", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"System`EdgeAdd", "[", 
                  RowBox[{"g", ",", " ", 
                   RowBox[{"i", " ", "\[DirectedEdge]", " ", "i2"}]}], "]"}], 
                 ",", 
                 RowBox[{"Append", "[", 
                  RowBox[{"l", ",", "i2"}], "]"}]}], "}"}], ",", "\n", 
               "\t\t\t\t", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"System`EdgeAdd", "[", 
                  RowBox[{"g", ",", " ", 
                   RowBox[{"i", " ", "\[DirectedEdge]", " ", "i2"}]}], "]"}], 
                 ",", "l"}], "}"}]}], "\n", "\t\t\t", "]"}]}], "\n", "\t\t", 
            "]"}]}], ";", "\n", "\t\t", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"G", ",", "L"}], "}"}], " ", "=", " ", 
           RowBox[{"Fold", "[", 
            RowBox[{"stuff", ",", " ", 
             RowBox[{"{", 
              RowBox[{"G", ",", "L"}], "}"}], ",", " ", 
             RowBox[{"minimalElements", "[", 
              RowBox[{"Complement", "[", 
               RowBox[{"P", ",", "i"}], "]"}], "]"}]}], "]"}]}]}]}], "\n", 
        "\t", "]"}], ";", "\n", "\t", 
       RowBox[{"{", 
        RowBox[{"G", ",", "L"}], "}"}]}]}], "\n", "]"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"genIncidenceMatrix", "[", "e_", "]"}], ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"incidenceMatrix", ",", " ", "rules"}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"rules", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"e", " ", "/.", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"\[Alpha]_", " ", "\[DirectedEdge]", " ", "\[Beta]_"}], 
             " ", ")"}], " ", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"\[Alpha]", ",", "\[Beta]"}], "}"}], " ", "\[Rule]", 
               " ", "1"}], ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"\[Beta]", ",", "\[Alpha]"}], "}"}], " ", "\[Rule]", 
               " ", "1"}]}], "}"}]}]}], ",", " ", "1"}], "]"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"TODO", ":", " ", 
         RowBox[{
         "check", " ", "if", " ", "the", " ", "reverse", " ", "rule", " ", 
          "is", " ", "really", " ", "needed"}]}], " ", "*)"}], "\n", "\t", 
       RowBox[{"incidenceMatrix", " ", "=", " ", 
        RowBox[{"SparseArray", "[", "rules", "]"}]}]}]}], "\n", "]"}]}], "\n",
    "\n", 
   RowBox[{
    RowBox[{"idealLattice", "[", "g_", "]"}], " ", ":=", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"incomparable", ",", "matrix", ",", "minimalElements"}], "}"}],
       ",", "\n", "\t", 
      RowBox[{
       RowBox[{
        RowBox[{"incomparable", "[", 
         RowBox[{"x_", ",", "y_"}], "]"}], " ", ":=", " ", 
        RowBox[{
         RowBox[{"matrix", "\[LeftDoubleBracket]", 
          RowBox[{"x", ",", "y"}], "\[RightDoubleBracket]"}], "\[Equal]", 
         "0"}]}], ";", "\n", "\t", 
       RowBox[{"matrix", " ", "=", " ", 
        RowBox[{"genIncidenceMatrix", "[", 
         RowBox[{"System`EdgeList", "[", "g", "]"}], "]"}]}], 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"1", "\[DirectedEdge]", "4"}], ",", 
         RowBox[{"2", "\[DirectedEdge]", "3"}], ",", 
         RowBox[{"3", "\[DirectedEdge]", "4"}], ",", 
         RowBox[{"3", "\[DirectedEdge]", "5"}], ",", 
         RowBox[{"4", "\[DirectedEdge]", "5"}]}], "*)"}], ";", "\n", "\t", 
       RowBox[{
        RowBox[{"minimalElements", "[", 
         RowBox[{"{", "}"}], "]"}], " ", ":=", " ", 
        RowBox[{"{", "}"}]}], ";", "\n", "\t", 
       RowBox[{
        RowBox[{"minimalElements", "[", "P_", "]"}], " ", ":=", " ", 
        RowBox[{"Select", "[", 
         RowBox[{"P", ",", " ", 
          RowBox[{"x", "\[Function]", " ", 
           RowBox[{"And", "@@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{"y", "\[Function]", " ", 
               RowBox[{
                RowBox[{"x", " ", "\[LessEqual]", " ", "y"}], " ", "||", " ", 
                RowBox[{"incomparable", "[", 
                 RowBox[{"x", ",", "y"}], "]"}]}]}], ",", " ", "P"}], 
             "]"}]}]}]}], "]"}]}], ";", "\n", "\n", "\t", 
       RowBox[{"First", "@", 
        RowBox[{"go", "[", 
         RowBox[{"Range", "[", 
          RowBox[{"System`VertexCount", "[", "g", "]"}], "]"}], "]"}]}]}]}], 
     "\n", "]"}]}], "\n", 
   RowBox[{
    RowBox[{"testGraph", " ", "=", " ", 
     RowBox[{"System`Graph", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"2", "\[DirectedEdge]", "4"}], ",", 
        RowBox[{"1", "\[DirectedEdge]", "3"}], ",", 
        RowBox[{"1", "\[DirectedEdge]", "4"}], ",", 
        RowBox[{"3", "\[DirectedEdge]", "5"}]}], "}"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"lattice", " ", "=", " ", 
     RowBox[{"idealLattice", "[", "testGraph", "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", "\n", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"AdjacencyMatrix", "[", "testGraph", "]"}], " ", "//", " ", 
       RowBox[{"MatrixForm", "\n", 
        RowBox[{"IncidenceMatrix", "[", "testGraph", "]"}]}]}], " ", "//", 
      " ", 
      RowBox[{"MatrixForm", "\n", 
       RowBox[{"genIncidenceMatrix", "[", 
        RowBox[{"EdgeList", "[", "testGraph", "]"}], "]"}]}]}], " ", "//", 
     " ", "MatrixForm"}], "\n", "*)"}], "\n", 
   RowBox[{"(*", "\n", 
    RowBox[{
     RowBox[{"testMedium", " ", "=", " ", 
      RowBox[{"idealLattice", "[", 
       RowBox[{"System`Graph", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[DirectedEdge]", "2"}], ",", 
          RowBox[{"3", "\[DirectedEdge]", "2"}], ",", 
          RowBox[{"4", "\[DirectedEdge]", "3"}], ",", 
          RowBox[{"5", "\[DirectedEdge]", "6"}], ",", 
          RowBox[{"7", "\[DirectedEdge]", "6"}]}], "}"}], "]"}], "]"}]}], ";",
      "\n", 
     RowBox[{"testLarge", " ", "=", " ", 
      RowBox[{"idealLattice", "[", 
       RowBox[{"System`Graph", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[DirectedEdge]", "2"}], ",", 
          RowBox[{"3", "\[DirectedEdge]", "2"}], ",", 
          RowBox[{"4", "\[DirectedEdge]", "3"}], ",", 
          RowBox[{"5", "\[DirectedEdge]", "6"}], ",", 
          RowBox[{"7", "\[DirectedEdge]", "6"}], ",", 
          RowBox[{"8", "\[DirectedEdge]", "9"}], ",", 
          RowBox[{"10", "\[DirectedEdge]", "8"}], ",", 
          RowBox[{"11", "\[DirectedEdge]", "8"}], ",", 
          RowBox[{"12", "\[DirectedEdge]", "9"}], ",", 
          RowBox[{"13", "\[DirectedEdge]", "12"}], ",", 
          RowBox[{"14", "\[DirectedEdge]", "12"}], ",", 
          RowBox[{"15", "\[DirectedEdge]", "9"}], ",", 
          RowBox[{"16", "\[DirectedEdge]", "15"}], ",", 
          RowBox[{"17", "\[DirectedEdge]", "15"}]}], "}"}], "]"}], "]"}]}], 
     ";"}], "\n", "*)"}], "\n", 
   RowBox[{"(*", 
    RowBox[{"System`Graph", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"2", "\[DirectedEdge]", "4"}], ",", 
        RowBox[{"1", "\[DirectedEdge]", "3"}], ",", 
        RowBox[{"1", "\[DirectedEdge]", "4"}], ",", 
        RowBox[{"3", "\[DirectedEdge]", "5"}]}], "}"}], ",", " ", 
      RowBox[{"VertexLabels", "->", "\"\<Name\>\""}]}], "]"}], 
    "*)"}]}]}]], "Code",
 CellChangeTimes->{{3.5889905073278155`*^9, 3.588990546984893*^9}, {
   3.5889905789929905`*^9, 3.5889906007207713`*^9}, {3.588990763377595*^9, 
   3.5889909397381725`*^9}, {3.588990981290492*^9, 3.5889911476297865`*^9}, {
   3.588991186244734*^9, 3.588991326178644*^9}, {3.58899137523593*^9, 
   3.5889913761800456`*^9}, {3.5889914075800653`*^9, 3.588991431579138*^9}, 
   3.588991509796151*^9, {3.5889915403600636`*^9, 3.5889917003165464`*^9}, {
   3.5889917372482696`*^9, 3.588991812556916*^9}, {3.588991939347147*^9, 
   3.588991952804865*^9}, {3.5889919959093833`*^9, 3.588992012853557*^9}, {
   3.5889921425901613`*^9, 3.5889923340036707`*^9}, {3.5890722396111503`*^9, 
   3.589072244602789*^9}, {3.589072279647276*^9, 3.5890722836147833`*^9}, {
   3.589072360542638*^9, 3.5890723730152287`*^9}, 3.5890727882173824`*^9, {
   3.589073080215764*^9, 3.589073124964493*^9}, 3.5890843112995634`*^9, {
   3.5890845117632313`*^9, 3.58908459268159*^9}, {3.5890848401972723`*^9, 
   3.5890849179092216`*^9}, {3.5890849714920807`*^9, 
   3.5890850402038836`*^9}, {3.5890850857267103`*^9, 
   3.5890851286682076`*^9}, {3.58908880507286*^9, 3.5890888523299074`*^9}, {
   3.589088886970339*^9, 3.5890888971276393`*^9}, {3.5890890035612698`*^9, 
   3.5890890073997617`*^9}, {3.5890890392508335`*^9, 3.589089057819216*^9}, {
   3.5890891035230665`*^9, 3.5890891105299587`*^9}, {3.58908916701219*^9, 
   3.5890891917873664`*^9}, {3.5890893066120605`*^9, 3.589089309536435*^9}, {
   3.589089370519245*^9, 3.5890894430265303`*^9}, {3.5890894800102606`*^9, 
   3.589089643778225*^9}, {3.589089683405303*^9, 3.5890896835083113`*^9}, {
   3.5890897150463486`*^9, 3.5890897259337425`*^9}, {3.5890897904920125`*^9, 
   3.589089827061692*^9}, {3.5890898587337437`*^9, 3.5890898718524227`*^9}, {
   3.589090162155593*^9, 3.58909019154235*^9}, {3.5890902377182603`*^9, 
   3.589090641216922*^9}, {3.5890906994693794`*^9, 3.589090719916997*^9}, {
   3.5890907673490644`*^9, 3.5890908584017224`*^9}, 3.5890909096262784`*^9, {
   3.5890909567153063`*^9, 3.589090956930334*^9}, {3.589091090373423*^9, 
   3.5890911048502717`*^9}, {3.5890923998630576`*^9, 
   3.5890924115965652`*^9}, {3.589094131038682*^9, 3.5890941473157663`*^9}, {
   3.5890956617506485`*^9, 3.589095662612759*^9}, 3.589110507639208*^9, {
   3.5892785984835744`*^9, 3.589278602069029*^9}, {3.5892786333930435`*^9, 
   3.5892786687055645`*^9}, {3.589279873823843*^9, 3.5892798917101336`*^9}, {
   3.5892799245753355`*^9, 3.5892799923880215`*^9}, {3.589280155973959*^9, 
   3.5892801601524935`*^9}, {3.5892802870637407`*^9, 3.589280334166771*^9}, {
   3.58928044082343*^9, 3.5892805128676476`*^9}, {3.589280583227661*^9, 
   3.5892806489080696`*^9}, {3.5892806807241373`*^9, 3.589280810303731*^9}, {
   3.589280930233079*^9, 3.5892809438368206`*^9}, {3.5892810273035126`*^9, 
   3.589281064224238*^9}, {3.5892811411570864`*^9, 3.589281156357027*^9}, {
   3.5892812486028423`*^9, 3.5892814791523514`*^9}, {3.5892815115154996`*^9, 
   3.589281530711957*^9}, {3.5892815933209724`*^9, 3.589281740635832*^9}, {
   3.589281804425993*^9, 3.5892818131631155`*^9}, {3.5892821510693703`*^9, 
   3.589282372865765*^9}, 3.5892824054609375`*^9, {3.589282442629695*^9, 
   3.5892824780562305`*^9}, {3.589282563770209*^9, 3.589282745282441*^9}, {
   3.5892827854555845`*^9, 3.589282832099555*^9}, {3.58928286958936*^9, 
   3.5892828731468105`*^9}, {3.5892829800164967`*^9, 3.589282981695712*^9}, {
   3.5892830146739283`*^9, 3.589283021017746*^9}, {3.5892830711051536`*^9, 
   3.589283073759494*^9}, {3.5892831647061357`*^9, 3.5892831665793757`*^9}, {
   3.5892832156816673`*^9, 3.5892832203282557`*^9}, {3.5892832771455355`*^9, 
   3.589283390404029*^9}, {3.5892834981408215`*^9, 3.5892835208787327`*^9}, {
   3.5892835570143642`*^9, 3.589283594643176*^9}, {3.5893451791912107`*^9, 
   3.589345209130044*^9}, {3.589427221183195*^9, 3.589427230829424*^9}, {
   3.5894272875526857`*^9, 3.5894273299361115`*^9}, 3.5894275430804033`*^9, {
   3.5894469031168675`*^9, 3.589446903187872*^9}, {3.5894469343428597`*^9, 
   3.5894469344758825`*^9}, {3.5896131208449955`*^9, 3.589613141325612*^9}, {
   3.5896248181124763`*^9, 3.5896248308791103`*^9}, {3.5896248614500227`*^9, 
   3.5896249377897964`*^9}, {3.5896249978354783`*^9, 3.58962522878905*^9}, {
   3.5896253135919013`*^9, 3.58962531400896*^9}, {3.58962545205363*^9, 
   3.589625455709095*^9}, {3.5896254960452585`*^9, 3.5896255214115057`*^9}, {
   3.5896256862276106`*^9, 3.589625722029195*^9}, {3.589627037014533*^9, 
   3.5896270392528243`*^9}, {3.5896343588738804`*^9, 3.589634360989151*^9}, {
   3.5896344625451517`*^9, 3.5896344804814425`*^9}, {3.589635042926447*^9, 
   3.589635087929213*^9}, {3.5896356217125483`*^9, 3.5896356476778727`*^9}, 
   3.5896364241162715`*^9, 3.589637602772163*^9, {3.589637981106591*^9, 
   3.5896379918499727`*^9}, {3.589740205940374*^9, 3.5897402082296677`*^9}, {
   3.5898253154077573`*^9, 3.589825333809108*^9}, {3.589825537728219*^9, 
   3.5898255422537985`*^9}, {3.5898255851962957`*^9, 
   3.5898256142990217`*^9}, {3.5899113951463394`*^9, 3.5899114882542596`*^9}, 
   3.589911596942168*^9}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{{}, {1}, {2}, {1, 2}, {1, 3}, {1, 2, 3}, {1, 2, 4}, {1, 3, 5}, {1,
        3, 7}, {1, 2, 3, 4}, {1, 2, 3, 5}, {1, 2, 3, 7}, {1, 2, 4, 6}, {1, 3, 
       5, 7}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 6}, {1, 2, 3, 4, 7}, {1, 2, 3, 5, 
       7}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 7}, {1, 2, 3, 4, 6, 7}, {1, 2, 
       3, 4, 5, 6, 7}}, {{{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 4}, {4, 6}, {4, 
       7}, {5, 6}, {5, 8}, {5, 9}, {6, 10}, {6, 11}, {6, 12}, {7, 10}, {7, 
       13}, {8, 11}, {8, 14}, {9, 12}, {9, 14}, {10, 15}, {10, 16}, {10, 
       17}, {11, 15}, {11, 18}, {12, 17}, {12, 18}, {13, 16}, {14, 18}, {15, 
       19}, {15, 20}, {16, 19}, {16, 21}, {17, 20}, {17, 21}, {18, 20}, {19, 
       22}, {20, 22}, {21, 22}}, Null}, {VertexLabels -> {"Name"}}]], 
    Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.019671594508975713`], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$2", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$3", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$2", Automatic, Center], 
         DynamicLocation["VertexID$4", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$2", Automatic, Center], 
         DynamicLocation["VertexID$5", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$3", Automatic, Center], 
         DynamicLocation["VertexID$4", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$4", Automatic, Center], 
         DynamicLocation["VertexID$6", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$4", Automatic, Center], 
         DynamicLocation["VertexID$7", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$5", Automatic, Center], 
         DynamicLocation["VertexID$6", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$5", Automatic, Center], 
         DynamicLocation["VertexID$8", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$5", Automatic, Center], 
         DynamicLocation["VertexID$9", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], 
         DynamicLocation["VertexID$10", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], 
         DynamicLocation["VertexID$11", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], 
         DynamicLocation["VertexID$12", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$7", Automatic, Center], 
         DynamicLocation["VertexID$10", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$7", Automatic, Center], 
         DynamicLocation["VertexID$13", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$8", Automatic, Center], 
         DynamicLocation["VertexID$11", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$8", Automatic, Center], 
         DynamicLocation["VertexID$14", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$9", Automatic, Center], 
         DynamicLocation["VertexID$12", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$9", Automatic, Center], 
         DynamicLocation["VertexID$14", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$10", Automatic, Center], 
         DynamicLocation["VertexID$15", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$10", Automatic, Center], 
         DynamicLocation["VertexID$16", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$10", Automatic, Center], 
         DynamicLocation["VertexID$17", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$11", Automatic, Center], 
         DynamicLocation["VertexID$15", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$11", Automatic, Center], 
         DynamicLocation["VertexID$18", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$12", Automatic, Center], 
         DynamicLocation["VertexID$17", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$12", Automatic, Center], 
         DynamicLocation["VertexID$18", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$13", Automatic, Center], 
         DynamicLocation["VertexID$16", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$14", Automatic, Center], 
         DynamicLocation["VertexID$18", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$15", Automatic, Center], 
         DynamicLocation["VertexID$19", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$15", Automatic, Center], 
         DynamicLocation["VertexID$20", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$16", Automatic, Center], 
         DynamicLocation["VertexID$19", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$16", Automatic, Center], 
         DynamicLocation["VertexID$21", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$17", Automatic, Center], 
         DynamicLocation["VertexID$20", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$17", Automatic, Center], 
         DynamicLocation["VertexID$21", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$18", Automatic, Center], 
         DynamicLocation["VertexID$20", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$19", Automatic, Center], 
         DynamicLocation["VertexID$22", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$20", Automatic, Center], 
         DynamicLocation["VertexID$22", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$21", Automatic, Center], 
         DynamicLocation["VertexID$22", Automatic, Center]}]}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          DiskBox[{0., 7.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox[
          FormBox[
           RowBox[{"{", "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 6.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           RowBox[{"{", "1", "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 6.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           RowBox[{"{", "2", "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 5.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 5.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "3"}], "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$5"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 4.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$6"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3"}], "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$6"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 4.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$7"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "4"}], "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$7", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$7"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 4.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$8"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "3", ",", "5"}], "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$8", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$8"], 
       TagBox[{
         TagBox[
          DiskBox[{2., 4.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$9"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "3", ",", "7"}], "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$9", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$9"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$10"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], 
           TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$10", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$10"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$11"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "5"}], "}"}], 
           TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$11", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$11"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$12"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "7"}], "}"}], 
           TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$12", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$12"], 
       TagBox[{
         TagBox[
          DiskBox[{-2., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$13"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "4", ",", "6"}], "}"}], 
           TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$13", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$13"], 
       TagBox[{
         TagBox[
          DiskBox[{2., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$14"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "3", ",", "5", ",", "7"}], "}"}], 
           TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$14", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$14"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 2.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$15"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
           TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$15", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$15"], 
       TagBox[{
         TagBox[
          DiskBox[{-2., 2.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$16"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "6"}], "}"}], 
           TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$16", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$16"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 2.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$17"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "7"}], "}"}], 
           TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$17", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$17"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 2.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$18"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "7"}], "}"}], 
           TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$18", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$18"], 
       TagBox[{
         TagBox[
          DiskBox[{-2., 1.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$19"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
             "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$19", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$19"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 1.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$20"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "7"}], 
             "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$20", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$20"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 1.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$21"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "6", ",", "7"}], 
             "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$21", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$21"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 0.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$22"], 
         InsetBox[
          FormBox[
           RowBox[{"{", 
             
             RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", 
               ",", "7"}], "}"}], TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$22", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$22"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{2.65554287843495, 
       226.12146779499955`}, {-163.999866751686, 155.61566223481594`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  ImageSize->{226.12160104331343`, Automatic}]], "Output",
 CellChangeTimes->{
  3.589451554337315*^9, {3.589613124499464*^9, 3.5896131418026733`*^9}, {
   3.589624895658397*^9, 3.5896249382458506`*^9}, {3.589625177872532*^9, 
   3.589625229717169*^9}, 3.5896253148480635`*^9, 3.5896254563701797`*^9, {
   3.589625497335424*^9, 3.589625522151602*^9}, {3.5896257081504173`*^9, 
   3.589625722292224*^9}, 3.5896268847890453`*^9, 3.589627039927906*^9, 
   3.589634227097005*^9, 3.589634551755568*^9, {3.5896346706387863`*^9, 
   3.5896346711558533`*^9}, 3.5896350916886897`*^9, {3.5896356350682526`*^9, 
   3.5896356478878946`*^9}, {3.589636415438155*^9, 3.5896364248143554`*^9}, {
   3.5896375214957533`*^9, 3.589637550622486*^9}, 3.5896379934481716`*^9, 
   3.5897402149225245`*^9, {3.589825321673554*^9, 3.5898253347612295`*^9}, 
   3.589825542646843*^9, {3.589825588123665*^9, 3.5898256146820655`*^9}, {
   3.5899113783891892`*^9, 3.5899114001619816`*^9}, {3.5899114444216433`*^9, 
   3.5899114888743334`*^9}}]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
tLS05cuX6xzbuXPnEydOqD96eXmZmZmpP2L7Y0dRG/rHYqDlS9WEHunxA9TQ
oKKSFwYFnB/ry6qFVilX5oUGJEiKvhEnPji01XXTyqVOe+4lFGK2k2YEX/FY
7h4Qfst17hy3h5lacmTpAV5b3D3dVi5de+xNLnYqIE1/d8nd0eN1evjlTXOn
zlp3OUZMbZ16lE4bvCczTJvMf/TllvvC6bOW7XmShs8XYDtd3ua4NYj/d+5L
j1ENEaTpxBWb9tz/lqx9rIJV+uzVO3dv2bh+41avB/EiVKXIeX/R08XTJ5Sv
eXMBlaS9ubhtw/Gwb09328+YueSPO4mM5lGh4oR7Xnv37f7DbbPLwVCi1ij5
YVd2ua6aP3POBu8wgVxL3VT6iSGl9k7CcDcsa33iwy5ssJtqu/FqPNm+tmDd
+yF0tpdnvb26323jtkuxEux0NuCs56bN+59mKGRZIVc9V7g9SYm97Wk/c6bD
4bd5Ml7wqdW2U2xWe0cU4P3Kp/MBjQ66vtM9H9S1mDL39ZGN8/qYIOaTV653
OxupHR9qJ5NZK0l+eNDVZcumjS7Le9cqKuU0RqC4HB/3XIqzn8ZDFKgVNjEx
sX79+v/5z380N+7YsePJkyeaWzIyMqpXrx4WFqbeYm1t7eLiov6I7Y8dxdKQ
Tq/ZtdXYU69UU6HCiBv79x0/udfV7ajfk+eBryN5CqoJmWRxOpvd8lpwxRxD
qOJ9EMXcPrDNbYPDkvWngvMwdSX06aGFtho6UajIfnly68YNm3Ze/8rLfHtx
+6YNG7ccuhMlVMpSnx5337zT95uExkhMI6FeyUu1FKcDK2hQYDJ06QcFQ8cE
AwcFTV+WJACj+agG4Sw4NIlTVSBKOdJ9w/mrV//03r1w1O+BQnyzPPH0pH4O
j3OVKlmSz7QmpmNOxf5P+J0/hmImnrrxwO6Vs5aej9eQIove3dv012vZqDLt
wvDazR3eCnnhdzwG10RaTF+7y9v/zp4xDWoOPpOi40jao7TbyHkyo4Fxlxkr
PA57bZ3ZDkFa2j/L4X29i4k2GnAxE3OoJMy5jcnQ63kqpe6xkeEc0s+88JnW
0Kj3sWRCLWX6pRmzLqdrJYA86/2VVV2q1ewx6/cNO/e5TGuNIOa/PcUGT6p5
EmSS8G0j7e5hp5LypPO2c/z5WJh+2WXj6IeVbEnMoUE16431SVWo1WVDcyd8
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
XdqR601SoaxWPZBc4jLPd4RJy5X4upQlHeTIF+rXGsLpIpMj90vlRdpE16eU
4xaL3NbBmCzl+GrbdbVW28ZKAmsHtYJdZ2lsrFb0qNV121cpUfBmrwrM196d
Xmn6lDLQf9whpF9XOeUwxB7rGuFl1Z3qENrO0BuSdqs+QxJH2NIPA1UWefz+
3s1nPaOuFYLyHs83Q1oufyEoOkUrsQvtMbSr2qukCd5z2ldDkCZDHb2/CjVX
iy/E/l+tzcZPRcNM/uNpdZBeXkkKfeVQUddW7Mp69uzZ6nWlMbC/sS3q5Skt
LCyoh/fr12/fvn3s1tI8sKwT7Kgw8sb29c6eR3ZONattdZevvQCwSvxpQ2vj
XkcSFSWlnNFXurCW8sJgJ4taA0/hOVIQtKBZswXPieGqyC24aZWZV8fUM7N7
zJdEHFp+PlFO73AOl+h8LaF3tzhmR5fiIiAOWWNRayRZBAqC5jU2tXkq5O4y
/R6ULmh2URrh0alGJ49I0hPFQaZvVPPCt3SoM+KGVrHRzzMlYyWDNRTEMMlw
H5IynBbtJ7g3tq45MTJr+NAw5+hUOmpkcuS+rDRepE90/Uq5LNqzE1sp5+ig
ZrDrVDBltt9UU7NZ93LFX3fZuIeKdXanV5o+pQzzH587hPTqKmcoMsWeQaXc
YN0pDqHtDL0h6bbqNSSxhy39MMDSh0oOMbnRet3H4uVEJClhxNLCitSbax1d
F3ao2doxkLy7qDFFRXcMbZArRbkihSzj1dFF3Y0RU9v7eag6L6Rxe7shtSff
K4qcgudzGtUZeyuPPllo5FBR19b4+Hgejzd9+nT1V9jf2BZsO/mRWsqFQqGR
kdGbN2/YrVV+pbzw01bLjgv8s5VYoK5oWYemlH9c3dp04l2exlU5k68osN8r
RwVvNg/qZ+fhdcjV3uHQOx5x10hrdFPlP1/UtM6o47fc19zG186ia1jE7hJd
j/1PDK27uYoAd5eZ9tDpgmYXpV+3dkTMin/1RwbZK5G+Uc2P39fdqKl98WLW
qDAuJFWsl2dKxko5U/CXtpQv0S7lHPlC/VpDOF1kcuR+qbxYjqW8nlZJCJOw
d5C1lOPn0M4davXxuLjW9nCsTHd3eqXpU8ow/wm5Q0ivrmYnc8hhir1Sl3J9
dKc6hLYzDIak2arXkFTIGrYC2mGApvdVBWnU9m4I0m7B+c+5Mmn6s51r8Ft0
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
qky7MLx2c4e3eG80EkaefG5sa+vLGVhIRu3oVq32oFWH/ZNk8sTTk/o54Cum
yZJ8pjUxHXMq9n/C7/wxFAuQqRsP7F45a8kRf1+PwTWNqGsD4uOtUfMZmw5d
ffJg/7iGtYZfSJPnRz/YNbou0nK250nfwKALiywQUysnDy/fwMCzdubGvfbF
ybDDto20u8fDV8k4bzvHX3spPqo6CRJe+B1MAaTF9LW7vP3v7BnToObgMyla
s1ccWilV4i+7bBz9sCiQxBwaVLPeWJ9UzdeJ87/eVfdQkXbdru+syykylTLr
1ixTpAkRFdTjxRzW1lJPvZnOR1rKlyzmp6mUSvx1z9jRnh+FqCLllKVRLesr
GUrWLtEaUoYKghxaVOvgFk7Mwikzri1e85SP6gq6EP5J0/9LNddG4jQ0u6Xp
vlWk+81pijT97SlPFLZ9ioNfmpxJNp3x8p/OaliHXGGRWP4QXyyZGmD0ZtXP
HDp2pbMWbXRSNQvN5E4OWvla3ohkDSHtsKFPbo5koo8dFaoQBq9pZTLsRo5c
rtB69TVXJnCUcg2V/2ZKdT3yT8gL1wnb0sSdRnzr62mdcMvj8ADjeGbouIiv
AsbkkyL8/f0bNGjw3//+F/s7Ly/P2dnZyclJodByN4372DShfkeXgkzFhm4r
1Td/sSQwvS9pB+2qiyL9nofbtUQZKkm8PKVh7TH+uHE10ijn6tCaRQt/FX74
/+yde0BURf//V1JUNMW7ZZpZamZ0U1KffPwKaPpY3lCykB4tH8VLpIggiKGm
4iXRHm9hXpJKQRSxUPQLKl7KxEhR5GKIgF+Vyw9Y4hLg7rq/2T2ynt2ds3t2
Fzzn1Pv1h87Ozpn5zGdmPu89F87Mebqpdl+60qMenZ6qf0ig5vKS52UdvBLL
qy/592T2rdOicSRlm1/tqZMzs0le0f6hzZ+efb5Ss2ddSO/6LY81tzybD2O2
PJYfc3dsNzlertnuu7PjsJD4vBpVZebZbL0dFujmaDfgtR8cUaDJLTng0rKr
wf5l5qwqi5vcw2l6yCrC8k9HdLF78u0D+pekdD2sOPOfZ7rVT4TSQyOZDaQp
x98z42292nXZtDGiSznbKFXRoXe6vPlVvnaj1+Kfdm2KvF5lpkscjqxNX/OK
fY9PL1RplsmOmWtSqml9KzYYf/6Optb26HD6t6ri+Bndmj410mPK5xcenplS
66Y5T7NZciu9zZIvVRtPMLpb1XzdoTbdA/rspFlmfnGYHw1zU4jVP/okMLeY
uOYO1zbY5uKO+bNy9pBQreO5/jinLf9598iRvEeaPt1MjQC9k1bERZNbkxOI
cA8ePPhwPeyNJ0wNnylLjL+jTnSq2FBzKX6+aWoBU8rfogZtSaOSp36/bP7C
kA0r3m3f0uWgZnxZC6by/JxuLZy3aFxanuDZpYvn8TLt1016+F58OFplP451
kDmFZf/B2pT+YSVcUs7eul4712rTlvepj1ZVFz7p1uKfTLQqT3i/g+PEo3Iy
FTN3vPdcE5ms45CZOy7L2QucwxwFu1VmZ3n9oTJjVUnGmle6uh8zsYNtfQ+r
ryx9oekLS1OZh0fqm6qjHm/a24a112cbH8Ut5fVur0kJ7OUw9Hv2nSK6SeYc
SX4J3Ilwa93e48eS6ivrZ4XfqKNXVK0//rwdzeEps0arin/8oL3s6VmJpfUz
jjq1KM6jC6bhBKO7Vc3XHWZ6QJ+dVMvMLQ5eo2F6Cj3qH9fiNreYOBYht2yY
WQk8pJweYCxdf1zT1oJ5p2vdgpE2nm5mRoBvPeaGRG1Oyl9//fXQ0FD6d6Yc
yW0J5TvqRKeJDVWCqH42sYAp5WuoQdtcr8VM5cWgAc97HrqnJB7zftrBeEmp
SpMWvfm6x9Kw9QHTZ6w/W0ziSV366n6ylmNiHk6F8uPvtXMYEVVUbZ2UT+Ml
5cqKwgpF7e1TG71eaiZznHS46NFU4TCHY+o/woxVcs11n+6f/lx/8lGdk3xL
f7tFnZRfDnpe1n5qIrMvItPUqQol5fgic942qJ3Jpo2ReSmvywh9ya7T9JMP
d2tUydMv3Mw02SUuR2o6ddyrk8OwL6OWfHJAs40arW/V1kk5GRRqbbqjub5V
5O7zmRkwtZd995knHj6uQJtaNOdp4khrvTiSXG08wTilnJ871KZ7wC3lhpaZ
XRw8RsPcFGJNG47FbWYxcc4dDtkwG3dslnK+649r2low7x7dqeA90pTpZmYE
6PHMirhoUsrlcrmdnV1SUhLlO9PDZ8ISynfUiU4TGzUtl+bnChMLmFI+82da
0Dbda1FTezWkd9Pnl1ypUSvyvxvbptmw/bdLSmsqLy169uHsVuTt9XAJuaT/
cERt2qpXmz455vs7GlcrsjcO7O5xuFClfYDYuT7aaR42fdZ+wI7b2h+cAc/Z
D/gqr6Y4p1iuWYxvMldBSbx16PRvjQM1z1Q2f23zLW20+vmTbs2HRmqvUJaf
INFqfJxcLU9cHJKk+VWluvedi+PLazLrzJlDJuz87s0Hf6vd1Vj7hOK/Txmc
SJi2qubqsn4yWU/P8EuFtTX5x1Z8wr7/q9fDiqQZXWStR+3I1tyJKtzv2tJx
UrxcbXx86q9mvG1YuzabOkalyWzjH6XrHrm9+pJ/L5ndS77xd+tUlenf+vnG
3K0y3SUORz50Vi+Z/YuzEsq0H2m+MRh//o6m1vbocOq31WlbZgYdL1JWXPDv
0+zpaZr7gUycN6ib7rwLvj2Ya6rKogSfZ2VPeZ+vNJ5g1XS38nWH2nQP6LOz
+qKxZeYXh9nRMDuFWP2jTwJzi4lz7lT9NLeb/cMDWaXNxZ1H05++KNR6AYZq
Hc/1p3EDddpaMO90jrydwnOkKdPNzAjQO2lFXOQaEy3Hjh1zcHCorjbaI97s
8N06FsBpCaW3tIlOFRtqLmVsCk0tYMq4/D9q0JYwFRcCnJrKHF92mxqwckYv
WbOXZ+z+9XLMotdI3pi1x29V16StfauFjKFJs9ZPveG57RpxanV6+OQXur45
c82WtfMnT/4sobCu7GrUogHNZA5DlxxMkytVFRmHmErWn7xdqyqJ83qqSet+
Y5ccPBO1kGS3H7suPiM7abtXN5msz7x9F389HDyouazt22vis/J/3bfglSdk
nSdtTMjOPf/1R8/JZN2n77qY/cOkbs+M9N9xMCrs43/NiszTv7NlZI5SVZ5+
cKGTnaz9uA0JWTeTtk/VtDR33xXWs8VmrIq8Vir/dd3bnZi+d3z7iyt6Nwf1
elhdlBg4uLWs1YsuEz+YNuF5O7teUzaevldXYXi8OW+zas98lF1odNQ3GZX1
xgfHF9zXpY9mp7HdLv8ldGRHTet2rft/vO9WnaZeE12iOrL+m7rsL//5ysJf
qnQG6ldUrj/+epWadbT8vkmzDNv6oyJ1u0evZz323qxVK24fmkFqaT00YO+P
3/pS6r593th51SQQ92vatNsAl4nzNy1/44lm/Wd8deJ7d4MJpuJwKx93GPjV
qAecs9PIso83RUYEmVkcxYYzzWg0jCceewoZ9M9oEtw3v5joc6cm9+TWacTI
Nm7L9p/OYu9NaXol3CzMpKwK9qK4WahbfgnXr9CtM55VRq1+tDU2gmva8pt3
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
fHgr2dOTQzbvP5HwtVc3maPLnKVh+0+c2O7RuZlTaHot5aCUi/TxYJll3A02
VBfWXlv5iuP/fHtPpcz7+q2WXWecqVCVJsx4qkmvxSla7ytvf/vvT4jbTLla
A5GtNs36jPde+kVY0ISeMtnT048Vq2iO4d0vPepufjWiu+ue20SEry7v16Tl
m3O/OJTNuypawc+GEDF513ftytnuH205YugEtZ5faZ1X5H3n8Zr7npxatfJu
lLujrCNVyo19osiLGNvW7pVNN7VdVObvHu++J19fZqourxoxPORnuUqRs2WA
XQvXb27Tx442k9W85jefdU51uf6bu8uOurd1YLam1O4b+azfpQpqdbWP2iPr
QaWQn//kmeb/+L6grk5BW5DX/y+FNT4TPT/bHGJuubDWGw8PG896/QF/hLI4
xfRUkXP5jz5BKJ0tuGY+Ghiwf//+zZs3L1iwICEh4dixY+Tj7Nmz9daLJdGP
x2zgHWS0vPXWW/fu3dN9JEYeOHBg3rx5e/bs2bVr1zvvvEM5xiSW1kBaJzYY
ZdMXDGUWV9Mng8TQ9OHhtr+afWztB0cUaLJLDri07PqfswZbPHFIefnZRW4z
Yu49Wj4NdFbuzOxYWbR/aPOnZ5+vLIub3MNpesgqwvJPR3Sxe/LtA3otyI9N
cmz7bkwxc3zQ87Lmb0cXlx716PRU/RMoNZeXPC/r4JWYn+jZ2XFYSHxejaoy
82x2tZpWNefoUu14FFpoX9dcDeldv+e05j5o82HMntPyY+6O7SbHy6kH0ceD
ZVa5YTf0R5biQrUiP2bp4m9v1Kqqb+x5p21Lt0NkRtemr3nFvsenF6o0y3XH
zDUpdH8Y+EBzBpqgvZhcl7HutSbNRxwoohz1O+9+6VEQMcS+C5Nd+dOcp5tq
9kPk7SLqYF7y78nsqqiZnhQnsPxKO77izH+e6Vav3qWHRrbiPCs38IlmR8bl
/Vv0Db5co40tk+ee0F8+qqJD73R5k7k3pSz+ademyOtV1LGjzuRyfvObxzqn
udygg5pdplvp7TJNgiBHdaz29HfIpndDb3zUZpeL/lUwMx42O+D6mJ0q1A7T
Jwi9szy6p09gYOCNGzdatWqVnp6umSZKpYODg8GzXvyjX7n52cA7yGjp06eP
zpjs7OzIyEiS8PHx8fPzIwYPGzaMcgw3VtRAWic2GOZydJ46i/8SUl6/5b2a
vrm9HjQpVxadCJ6x9hc5+7pQQ11gZ24WlsaMaNV5+umSjDWvdHU/xr2prDx+
Urv2HseZApVnZnR+wmlDKulekx6+Fx/OwLIfxzrInMKyKzN3vPdcE5ms45CZ
Oy7LVXW0qrlGl1r4UWihfl2btrxP/eKtuvBJtxb/ZBZvecL7HRwnHpWbNeDR
eLBza/S7YWCRsQs1w6mSp36/bP7CkA0r3m3f0uWgxgzlnQi31u09fiypvrJ+
VviNOo4ustHKVv194aqLC7o3c9qQds3oKAv6pUfl+TndWjhv0YTT8gTPLl08
j5fxropekOUMuhN0VdGOr7my9IWmLyxNZWYoh9E0n9xQaJ4PjXzXsb17TGHV
5c8nLvnF4HZCTUpgL4eh3+tPM8rYFVJn8rVf+MxvNY91TnG5Qf84pJxjmj5q
T0/Kq+kL8g+98TG3XNSGN7RMetjcgBtgdqrQOkyfIBydrTLfPX1yc3O3bds2
c+ZM5uPFixcHDBhgUMaC6KcwOxt4Bxkt3bp106VPnjxZWan5PThmzJjjx48b
lDx8+PDSpUtJXyi18KghMTExNjZ2/fr1hw4dMmEDA4fzFZByDUZSrqpI2eq7
4niBwa3URpDyaaflmqsh3T/9uf4Mrjon+Zbeb0S9yVx14dMerV32305f3U/W
UncXv/z4e+0cRkTdqyisUNTePrXR66VmMsdJh+/dpFTNNbpKqh260EL92lxs
oh5kVsqVBt0o0ltnFBdWqCsvBg143vPQPSUJ3d5POzBBjVR/3KuTw7Avo5Z8
ckCz8R29i2z0Zevned0dRx8sMD4qO513v/RRlSYtevN1j6Vh6wOmz1h/tlhJ
t4lWFb0gOz5TnaCrinZ86WVymtO+/g/NmJZOmZZyxifMEqi6uLBXi1eX7vSZ
9MV1w8undRmhL9l1mn7y4dNyKnn6hVza2JVQZ/L/8ZrfZGKYX+fGLjdEEwRb
6wXBZIulvI5qcFG1TVJu2sPmBtwAs1OFKuXUCcLRWR7dM2LChAnR0dFMet68
eRs2bCgoKGAX4B/9isxHfd5BRouxjCoUiqeeeqqqivKjarMWWhfN1/D2228z
X/Xo0cOsDRzOp8/iv4SUX1r0rP2AHbe1l1rmd28++NtCTbb2Gcx/G0YrfSkn
Or555pzw5Ly7hPyss7tXfn2NCfgsKa/KPn4g8ZbpPz4hXnaU9Qq6zJZyzUp9
k7nCSGKZQydiS83VZf1ksp6e4ZcKa2vyj634JDxDb9WSyezoMIK5EqzM/Wpo
t399d0dZm7bq1aZPjvn+jvav3rM3DuzucbiwNHFxSJJm0qvufefi+PKazD8o
VWueIrYf8FVeTXFOsd6TEFQ7NH5kAgDta80jvM1f23xLu3h//qRb86GRWjPL
T5DFOz5OTj2IPh4ss7LjDbqhZybNhbVXQ3o3fX7JlRq1Iv+7sW2aDdt/u6RU
854NUmsvmf2LsxLKuLvIhi1btWmfv/7C9PgSFeWoct790kORt9fDJeSS3jrm
7SJaQe0j4c6MstCdUKnza0bSUqPjK5JmdJG1HrVDc/dYVbjftaXjJKMLoVSf
POxP7tfDW8gc3XblGQtk9SX/XjK7l3zj79apKtO/9fONuUsfO9pMVvGb33Xm
1znN5YaWXvTtwVx6VhYl+Dwre8r7fCVXdaz2SJGf5nazf1iE3g32+DBPvJtc
LmrWejPvYXMDrr++zU6Vkp8pHaZPEI4xM989fYh4dezYUS5/+E3Pnj2JjgcE
BLDL8I9+KvNRn3eQ0cK+wM6QkZExcOBAknjw4AE5y2Z/xVPKqTUcOHBA5w12
YfoFdo7OU2cxZ7CXCqqKjEOLXmsqcxyzPuH6lYMLnexk7cdtSMi6mbR9ajeZ
rM/cfVf0nl1mS3n1ldChDjI23efXX9p6JOXliVPby7oY3wzVoSi6dHjDe0/J
ZE1enLk9Pl37/Kaq/Hr0QmJW+7Hr4jOyk7Z7aWyZF3mtVP7rurc7MY11fPuL
KwaVaiazrNOwORu/jwoPGO86KzJPOyjV6eGTX+j65sw1W9bOnzz5s4RCpVp+
dFK3Z0b67zgYFfbxv0g5BfGEUdWqkjivp5q07jc2ON7gqoNRYVVFZgzjx7XH
b1Ubfv1H5Y0fggc1l7V9e018Vv6v+xa88oSs86SNCdm557/+6Dnit+m7LhbX
GR5Unk4fj/uPzMr6wbAbj0zkcOHt8wFOxM6X3aYGrJzRS9bs5RnfME9H12V/
+c9XFuquTVL8oUdt1k4vp659xvmt3xgyw2N2eGqFin6UkTO4+qXn4pq0tW+1
eDitmjRr/dQbntuuVfGu6r5BwfKyq1GLBjSTOQxdcjBNrlRXXKA4gTXcdynz
TFmUGDi4tazViy4TP5g24Xk7u15TNp6+pzDvk4eUnZj+6uQYyimN5kT8l9CR
HTWN2bXu//G+WzUcYyevMJ7J/OZ3HY91XkVzuYGlFRf8+zVt2m2Ay8T5m5a/
8USz/jO2/e+5KOPqvvvpwoGH7Z28XZ57cus0Ms3buC3bfzqLLHAjg+v0xue+
+eVy4VYaa72Z97C5AX+0vpXmpsrH2378nuq/OvoEMeosj+5dLDZ4SuHXX391
c3PTfRw7dmxUVNT//u//ssvwj348ov7/K+ITZOphP/Y2YcIEorzr1q2bPn06
+XhCC7uwsZSTE2p278zWsGfPnjVr1rBzOB57o3VeTZvFX/1cUMQV7P+icP4x
mgGss3JVRW5GfiVtfVlJbXHmpeTr9yivbNReYpocl3cz5Zcrt8r1BkRZfis1
+XJ2ycNTS1VdVU1tWU5q8pWcMtbUNK5aUVFayfEeBW47+Hxt20EPzeLohrmD
y+/eKavT1lJY8qgpVXXhHX2nmTWnruzWtSs3igxeAEk5ylJnqOQ/f7Fox5WC
e7lZ169eTj4Xv+uTUfOSLKvKdEG6E9jDTTu+tjDrWnZJnaLs5s1SDofTfaKu
y9ryvl+SiT85ryvLuZqWX2E2jBjMZHquFROD7nLjGx8199Kv3ZIr1IqS7Nxy
64MevRu2YMbD5gfcsiPp0CdIw3eWAv/oxxP+QYb9x2ju7u67du0KDw+fOXPm
/v37mQfY2BhLeUxMzLx583QfTdeQlpa2bNkygzq5/xiN3nn6LOYzGf4yWCHl
jxH5Mfd21AdAgbSoSQ15+ZlJkfn1V7rq7sStCD5yV1CbrKXm9k9HEy9d3Dtz
4rprjRrKbYPD5VI4QZGIhxsbAaOfRa+IoV5g37RpE59jKyoqmGMvXbrEzrf9
FTF/O6ovB/dt9cz/TJg8eXroJeo1c+Yd7JPHDujQfnSM6XewNyyKkrQji16U
yV5cdCSt5G/z2+qviar80iaPfk82fbL7S28MdB7iMtFn52Xr3pwhONWX/J+X
yWRdxmxK5bzHJAak63KpeLhRETz68Xxx66lTp7y0HD58WJd59OhR5o/szOLm
5jZw4EBnZ+fx48frMhvoxa1ALCgr7ubc1JJzt1IKJxPADMqqgpzMG3klEt/A
SXd9VgJI0+VS8nAjIXj0w3YqAAAAAAAAAAAAAAAAAAD4C6KsrqgWy43nuoqK
hzfEFFUVj+NuXgM2o6wqt+zP0hqpNq4uPfItbxvMz4zHNEx61FVW1EnqRq+W
xvGU5YNqyhaLJl3DznfraEwbrHPt425aiAUIRIey9Kf/LvIP8B75jGPfDyNy
BH2qpC7/2Nr3X3bsxrxEvPL87G72r4dlNbJJDdSMsiR51yf/7NL6Hw2ylblt
tdG6pO9bXjbwmxk2+a+oqGjFihXr1q1zd3efM2dOTY3p1wVqqMuPX/eBk+PT
U63YMNyK5hqQhp/Qlg+qKVuUxb/snDe0c+shfPZPt6hwI9Gwa04f6137uJt+
THESiJzK83P6Dta8Jbg6bccc723XecY2VWlybGojzHFVwbdDm3d6+K7u6pxT
P14oaPQ/uWiwZirPzOjSbFBDhRVbaqN2Sc+3PNrnOzNs8Z+3t7dOT52cnDw9
PXVfhYWF7dFCEgZHFe4f3qK9pxVSztWcibYakkaY0BYOKt2WR6tZs39XszdN
qrNFhRudhl1zeljl2oYJjJY1/ZjiJBA1mrcEt/zHPgvf8aIq/2nxoFH7GuOd
9Nq3A1sRmcRA9aVF7J0fRFWbBot8a93MsBSZTKbbkTk4ONje3p5JR0ZGBgUF
MWmSMHgTVNmP49p2tEbKqc2Zbkvs2L5g2KtZ+15yU+psUeHHQMOvkkdY7toG
C4xSDoOg0am6Ebs+KMBv9kdzVsVkVqrUysLTG3zff7W5rPOY2fMXb0/VexFz
bX58WOCSkMWzP/LZlFTI/sWnLDy5dFhbmazTaG+/Fbu+3xjku8BvxXeXi++c
2bnMb4Fv4Proq3Jlbe7RL5csWrE/q9q4XRrVN4+sC/AP9PP1n/VKC2YO19w+
vyd4ZlBCiUpde/dCRIj34ric6wdCpk+YMOOLM0W1xee3zJv0zsR5O648fMOF
siT5m88D5n4w4b0FO5JLleqa/LO7l8xcejo/ZY/flHfdP92TpumgqiozJmx1
6MrPFi/yX/eLfjM0J3FUQ3WQwSZO9ZAWvlk6a0l8SlTAlPcWH7mjMLTUotrU
KvmV79eEfrl5dcDijZFxx0+cTi02aOHmLb0uUXxremKYnBmGDmQP0439yxbO
f4Rf6A/5dUbjosf27duTk5OZ9OLFi9u1a8ekXV1dY2JimDRJkI/so5gNw3/4
NWrJ1HHu/1kVl1erVtw7uWWJ73zfoLDYjAqVWlFwbmeIf8iuX0qUZpsz3ZY+
tM7U3Tm9Ldj301kfzVm+6fPAr67J756JWLPYN3j39WpywhS/PcRv0ZqjtxUs
T6mq85J2Bi/4Mjnr6Mrp4ydM+yz6RrXmjbq0XI5GTQ4qccZm08uytN6W+6zV
vOpwrly7W9iujOSvF3i8O8k3IkNvnzwlv8KcI17H4RmDSVXCVYzvKqF70nAd
qjlCk6FrOc1RqyrSDqwNXrxgxrT5W84X1el7x/B6t3FkMbaHNqpGcc3gsMpH
C5ArVlFCBs7hJUvdja3/en3Gj4VKdW32rrEdHd22ZNaqVQr5+U+eaf6P7wvq
6hR676C+tvIVx//59p5Kmff1Wy27zjijH/5ZO8Up8na5tmoz7kgpmTDFP0xp
32zwbu1WQ3VZ//VYeKpMRW3XAEXedx6vue/JqVUr70a5O8o6anawLLl8cOkg
e7uBO+/cL7sW+/nwVrKnJ4ds3n8i4WuvbjJHlzlLw/afOLHdo3Mzp9B0UmPV
r59PnBlJ1k912vo37VuP+DrlYjQ5XvbUOJ/PdxyKXuXWxn7QthxFdUrwPz1i
ijW7ioRPeu9QCasZFc1J1/8vhVYN3UHUsKIsTon+bAhRxXd9166c7f5ReMrP
+pbuylXwr01dd/OrEd1d99wmS/rq8n5NWr4594sDF/VamLbh0P5HXaL51vzE
4J4ZBg4sYvtPnugfcOS25gGcypQVA5o7jv46p85wXEhvqfNTqVT27t07MDCQ
+dipUyfdNkkkQT6yCxMpb9Osz3jvpV+EBU3oKZM9Pf1YsUqRFzG2rd0rm25q
G1Dm7x7vvief64E9dnOm22JD6Uzdrb3vD/bam12jVpUlfdrjoX/Ljrq3dWD2
V9Rupfqs36WKR56quXvum7l9mtj3d/94wYpQ/7HdZbLOHx6993+03BIVpVGz
g2pmWf6/YvasZ+/7qNn4067reL/1EXGxa0a2bfHW1wYbkJkvbHrEKZ6pNpxU
JfRivFdJHc2/P2Rd0l+HGdSZT3ct1eqqy6tGDA/5Wa5S5GwZYNfC9ZvbSs4t
NOmRRd8eatO0uMY+bPuFi7o4WUyPVZSQcSj7b/zmW4lTetSj01P1j1HUXF7y
vKyDl+YCJWuDYTaK/Jili7+9UauqvrHnnbYt3Q7pv5pVb8aWHp3Ssd2Ew8Uq
7Z5/zZu9tYOs3drrX/7ny+u1nO2yqTjzn2e61Qej0kMjWz38Oapp5eFeuzVX
Q3rXb/yruUPXfBiz8a/8mLuj9n3EZXGTezhND1lFWP7piC52T759oFjTN/vB
EdrNfksOuLTs+p+zleWJnp0dh4XE59WoKjPPZlfrNUM3llYN3UFc59HVl/x7
MrvtqdVUSy2orSBiiP3DDegqf5rzdFOmWr0W2F3i8q3ZicE1M4wd+KgxRfHN
Qs3PgNJTnzzfrNu/YwuU1N6qaYSFhU2dOpUoLPNRJpOx5ZV8ZBdmzsoTtPOo
LmPda02ajzhQpJkly/u36Bus2UOXhM7Jc09w7yHAbs50W3rNGnXm5sl/d38p
5CoTGEtjRz+8KqrZKrmV3lbJl/Q8RSbuJMe278ZofVGdEvS8rPnb0cXU3N+N
G71lblC1+aaWpZ4thurc3JnZdLVo/9DmT88+r/+WVLOFzYw41TPGk4pWzJI1
R/Wv/iqhzvz/o7uWYk5l0aF3urz5lfbHorL4p12bIq9Xce6GTV9l+vZQlyrN
mwaLnT2U1FhFDxlAmmgmfJMevhcfXgEr+3Gsg8wpLJszYGuuyaR+v2z+wpAN
K95t39LloH4B/RlL5uDTbUfuu1ebs2fGtIk9WjitSZenhM7aRSYMvd2sW1sH
t2J2WbR7yvOHc0tfaPrC0lTmaaSyI2Pa1Es5OfjhFK1NW96nXsqrLnzSrcU/
GSkvT3i/g+PEo/K6jDWvdHU/Jue0UldtTeaO955rIpN1HDJzx2W5it0Mh5P+
oFVDdRCnlGsvRDL3FKmWWlBb5fk53Vo4b9EsxvIEzy5dPI+XGbTA7lLNFQ7f
mp0YnDPDyIGsYdKgvBv9fhf7Fxed03zH0VtDEhMTP/74Y5XqUVd5SHn9vfKq
iwu6N3PacEPT9r3Idx3bu8cUVl3+fOKSX7i25DZojq+UUzpTcyX4+RYPQyfb
vxxS/shT2u2tPI4zdVWemdH5CdIDBSV3bTylUTODymBiWar1bDFS54cTqTRm
RKvOhk9RmytsbsTpnjGaVPRi/Ncc1b96q4Q689f+QHctxZzSlMBeDkO/11dt
DinnWGV69lBHtYQa1/QXO9dQ6qynhwwgTerSV/eTtRwT8zAwlx9/r53DiKgi
zoBdeTFowPOeh+4pyTzwftrBtJSTj37PtR7638PL53yTlR72Rovn5m4LmBel
2Qieo93KjLiIXVp27z+Tk0x+NLev/9MiZgKeslDKtVe9un/6c/0ZRHVO8q1q
2rxWVhRWKGpvn9ro9VIzmeOkw0WqR81wGEtfHjQH8ZFyqqWW1KYqTVr05use
S8PWB0yfsf5ssdKwBbbnai5z+NbsxOCaGcYO1JPy2hvbR7Rx+Mf6aw/v8tJ6
a1BjSkqKj48PI6xHjhxhMtu0acOWV/KRfYi+lP88r7vj6IPMqV/VxYW9Wry6
dKfPpC+u068hGjdnui1W1407k/7T4uee6B1ylRb6W+uF/mQTUl514dMerV32
F9Jyv082ajTzZzODWl+Uc1mq+Uu54Y8Ec4XNjTjVM8aTilbMklVC9a/eKqHO
/G9P0l1LMUeeEfqSXafpJx9eYlTJ0y/k1nBIOVdk0ZNy2lKVU+OahVJODxlA
otSmrXq16ZNjvtcuZEX2xoHdPQ4Xaq7I/DS3m/3gbwsNSl8N6d30+SVXatSK
/O/Gtmk2bP/tklLWaxg0j67aD/gqr6Y4p1jzdEftteX9nmj58uyEUrXy9h6X
FrJuH/xQrDLVLpuKpBldZK1H7dDcv9FcDGzpOEm7hV/1pUXP2g/YcVvFPE7d
/LXNt7RS/vMn3ZoPjdSG7vITRMrHx8nVNVeX9ZPJenqGXyqsrck/tuKT8Iza
ql/md2/+sG/aJ0L/fapCnrg4JElTueredy6OL6/JrGM1QzeWVg3dQZWkJtoT
vdonfZ0fih3F0j8sqE2Rt9fDJeRSlYkW2J7j8q3ZicExM9TGDmQNk+YWeYv2
4/Yyd0crkncezkwxHhd2dVlZWdOmTbtx48bvWojIMvmurq66J8lJgvbY20Mp
r037/PUXpsc/fMRPrcj9engLmaPbrjxawKI2R2ur7s6pb3Ydy9Z3M2XoCo5N
aSfr6L47q1qtqrgY8nIz5i+Iqi/69mCugSqLEnyelT3lrblOzfIUkRpHhxHM
pWdl7ldDu/3rOzICtNwq40b/n7lBrR9bzmWpZwt7Ncs1yvgmc82cqLNDp38b
/EgwW5i2EtnH0zxDmVTGxUosWXNU/+qvEurML6e7lmZ19SX/XjK7l3zj79ap
KtO/9fONuas0DIy6kaCuMn17qEuV5k2Dxc4eSlqs4ggZ6qrs4wcSbz3WFyuA
BqE6PXzyC13fnLlmy9r5kyd/llCoVNfkntw67TmZrI3bsv2ns9hbHVZcCHBq
KnN82W1qwMoZvWTNXp7xDftZVlVJnNdTTVr3GxscX6CNmHU3Nv3TOeSKZl6o
ig97vD7jZLmJdg1RFiUGDm4ta/Wiy8QPpk143s6u15SNJ3+/dmjRa8SGMesT
MtN+CB7UXNb27TXxWfm/7lvwyhOyzpM2JmTnnv/6I2J+9+m7LhbXVfy67u1O
zFX7jm9/ceWP8vSDC53sZO3HbUjIupm0fWo3mazP3H3nIt27PTPSf8fBqLCP
/zUrMq+uIqO+mZO3a42NvU+v5kreeUMH7f71cgxT09rj7PMQZdnVqEUDmskc
hi45mCZXah571be0kuZurtrUNWlr32rBHCxr0qz1U294brvyf3otqPS6RPPt
6Xvse2W0AeKeGfKjk9gOvFX2qLGM074vkC65zQ4IDAxcvGj2uDfcduTdN+4t
GycnJxmLUaNGMfkRERELFy5k0iRBPrKPqs3a6eXUtc84v/UbQ2Z4zA5PrWBZ
WHZi+quTY4qofylBbY7SVvUlv2fJ9/1W6G+MTRm6urwDM/rYyWQtu70++bOQ
f7Z+eBpbccG/X9Om3Qa4TJy/afkbTzTrP2NbwvkDj4ZFIzWyTsPmbPw+Kjxg
vKtmJqoZATLKpTRqflAZuJal/hTRreYlB89ELSTZ7ceui8/ITtrupZns8yKv
yVlL1nxhMyNu7Jmvfv79B71JlaegFks4uojvKqF48k/DdUif+RyupVldUPJL
6MiO2tuErft/vO9WHSUw6jBqq87IHmrTd8r0vVlucBhrKBOuX6HGqrupRiHj
WpW6PHFqe9nDW+hAcijLb6UmX84u4fP4om5HQUVFYQnlxYiKitLKR8FDVVVY
WPWwUF3pHbl+WOHTbm1h1rXskjpF2c2bpdY+lVFbnHkp+fo9E69xVNVV1dSW
5aQmX8kp42iFr5PMOcgyS3nWppL//MWiHVcK7uVmXb96Oflc/K5PRs1LMtua
Od/ynxg8HEhp3+y4UDD32pa6slvXrtwoMnxjZV3Wlvf9kiz8k3OjtlSVeVdP
rZ+64lfD2wG0zijkt65ey69S6d22VtXcS792iywERUl2brnh71ftBeDJcXk3
U365ckv3LT2X3iivBWN6WbLQX81m4FHY1Igbe4Y6qWgO5L3muD1pAHXm01zL
MZ51ZTlX0/IrWC1we8fqMGjV+qmHHjIqyI+A3Ix8jr8NBgA0KjWpIS8/Myky
v/7iXd2duBXBR+4KapNYqLn909HESxf3zpy47prtf2pTnX149fKDRn8cbBLm
vR6029ZGyI+5t9P+6QWPXGA58GQ9HCED98sBEBBV+aVNHv2ebPpk95feGOg8
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
r1y50tvbm6gD+Vf399rMjXImPWXKlODgYJ428CnGXB7XMWrUKCZfd3l82LBh
zCPuCoWie/fuzNPXRKeY6/yZmZm9evUiym51B8mPk4ULFzLfkgT5yLMqszS2
FFIHS8fOnTt1F9jJr53U1FQmnZOT8/777/OpH1IOAAAC0rBBmJz0EfkODQ2d
N2/e2rVrTd/RZtvQUK2vWrWKtO7l5UXO2ZlH6M+dO+fn57ds2TJyRp+RkWFj
E9RXxNiOgFL43XffjRkzhpyMr169Wq31IXFXqBa8IgYAACSBGIKw4AYIjhhG
wRakbj8AAEgaMQRhwQ0QHDGMgi1I3X4AAJA0YgjCghsgOGIYBVuQuv0AACBp
xBCEBTdAcMQwCrYgdfsBAEDSiCEIC26A4IhhFGxB6vYDAICkEUMQFtwAwRHD
KNiC1O0HAABJI4YgLLgBgiOGUbAFqdsPAACSRgxBWHADBEcMo2ALUrcfAAAk
jRiCsOAGCI4YRsEWpG4/AABIGjEEYcENsJHExMRNmzZt3ryZeW2sFYhhFGxB
6vYDAICkEUMQFtwAG2HeAK9UKseOHWtdDWIYBVuQuv0AACBprA7CRUVFK1as
WLdunbu7+5w5c2pqamyxgWfJP//8k5wCOzs7s3f4Ml2goKAgPDw8NjY2NDR0
1qxZPF8qzqctHX379mUSL730Es/KDWhsKUxPTx80aJCfn9+SJUtGjx6dmZnJ
5Bv3UaVSbdy4kbgrIiIC72AHAABJYHUQ9vb21sm3k5OTp6cnk7ZiwxH+BmzY
sCEmJsZgs07TBXx8fMgvDSbds2dP461RLWqL2jsvL6+SkpKcnBx7e3uelRvw
GKR8yJAhLi4uvr6+ubm5unzjPpKc06dPM+no6Ggi/Xzqh5QDAICAWB2EyVG6
zcGDg4MZFYuMjAwKCmIySUK3u7fZqvi3a7zvtukCu3fvnj9/PpPu3bs3s/Op
dW1x9Y78pCGCeO7cuTfeeIN/5Wweg5QTXaZ+ZdBHDw+PqKgoJp2cnMzTXZBy
AAAQEKuD8Pbt23VPeS1evLhdu3Yk4erqSkSNySQJ8pGnDfzbtVTKdaSlpbVq
1YqImtVtcfVu7969f/zxx++//75gwQL+lbN5DFJOBDopKSkuLs7gmrlBH7/5
5puWLVuSc/P79+9PmzaNp7sg5QAAICC2B2GlUknOdgMDA0m6U6dOJ0+eZPJJ
gnzkaQP/5qyQ8oqKitjYWDc3t/j4eP4NGVfF1buNGzcSoVyzZg3/G/EGPAYp
9/b2lsvlZWVlI0aM+O2333RfGbtr7dq1xBjys4e/uyDlAAAgILYH4bCwsKlT
pxJBZ2pjix3Pmh/PWXl+fr6joyPPa/7UqqzrHR8aWwqVWpj0li1bhg8frvvK
oI/Z2dlE9FNTU995552mTZvyv0UCKQcAAKGwMQgnJiZ+/PHHKpVKV5vYpJyc
ij548IBJjx07tmvXrsaHDNRitirpSvnBgwdv3rzJpKOjo+3s7HRfGfRx6NCh
t2/fJgnitM2bN1PdZQykHAAABMSWIJySkuLj48Po+JEjR8i/bdq0YYsd+cjT
Bv6NWirlHTp00D2e5+Hh4eDgYHVb1vWOD40thaTyTZs2MemIiAjmwQYGgz72
69ePfeBzzz3Hs35IOQAACIXVQTgrK2vatGk3btz4XQvzR16urq66S7IkIYbH
3oYNG8Y8nqdQKLp3727LE+zW9Y4PjS2FzI1yJj1lypTg4GDdVwZ9HDlyZGpq
KpPOycl5//33+dQPKQcAAAGxOgg7OTnJWIwaNUqtPeNbuHAhU4AkyEeeNvBs
dOXKlUSViPSQf0mayWRfHjcuQERq1apVoaGhXl5e5PcG/yfTjKuyrnd8aGwp
JE4g8k2cMG/evLVr1+puiFDd5efnF6oFr4gBAABJ0OBBuFFfESM4VvSOD1KX
QqnbDwAAkkYMQVhwAwRHDKNgC1K3HwAAJI0YgrDgBgiOGEbBFqRuPwAASBox
BGHBDRAcMYyCLUjdfgAAkDRiCMKCGyA4YhgFW5C6/QAAIGnEEIQFN0BwxDAK
tiB1+wEAQNKIIQgLboDgiGEUbEHq9gMAgKQRQxAW3ADBEcMo2ILU7QcAAEkj
hiAsuAGCI4ZRsAWp2w8AAJJGDEFYcAMERwyjYAtStx8AACSNGIKw4AbYyOHD
h5cuXbpt2zbmY2JiYmxs7Pr16w8dOsSzBjGMgi1I3X4AAJA0YgjCjW3Ahx9+
GBgYuIpFgzexWQuTfvvtt9Xa3Vt69OjB83AxjIItSN1+AACQNFYH4aKiohUr
Vqxbt87d3X3OnDk1NTUkMz09fdCgQX5+fkuWLBk9enRmZiZPG3g2+ueff5Jz
XmdnZ66d0ajvSB85cuToeoYOHcpzty9qW1zvYGdL+YEDB9RaKe/YsSPPfjW2
FKpUKn9//61adNvQUAeroKAgPDw8NjY2NDR01qxZ2E4FAADEj9VB2Nvbm5Fv
tXaXNE9PT7VWHYYMGeLi4uLr65ubm8vfBp4lN2zYEBMTw7XJaWRkZFBQEJMm
Cd2GpGvWrNGVWb58eUlJiXVtcdWv1pdyBiL37HZN09hSGBwc7OHhwaTd3Nz2
7dun5hgsHx8f8sOMSffs2ZPZu9YskHIAABAQq4MwOWr27NlMmiiFvb29WqsO
0dHRVlTFv7CJ/cpdXV2J+DJpktDtJ56Xl8ckUlJSLNqZ1Hi/cmr9aiMpT0tL
W7ZsGf+GGlsK27VrR37DMOnFixczllMHa/fu3fPnz2fSvXv35rm9O6QcAAAE
xOogvH379uTkZCZN1IGIhVqrDlFRUUlJSXFxcfx3Bm8oKe/UqdPJkyeZNEmQ
jwYF5s6dq1QqrW7LRP1sKa+oqGDSly5d4tlQY0shqVwn5STRtm1btbnBIr9G
WrVqRcrwrB9SDgAAQmF7ECbiSE7fAgMD1Vp18Pb2lsvlZWVlI0aM+O2333ja
wL85E1JO6mFLrUG1sbGxO3fu5N+QcVtc9Z86dcpLy+HDh9XaK9gDBw50dnYe
P348z4YaWwpfe+21gIAAJk1OtJm2uAaL/BQhviK9iI+P51k/pBwAAATE9iAc
FhY2depU5mxXqYXJ37Jly/Dhw3nawL85q6XcxcUlNTWVf0PGbZmu3xYaWwrP
nz9Pfl3cv3+fqLaTkxPTlunBys/Pd3R0ZD8PYAJIOQAACIiNQTgxMZGc5alU
KubjwYMHb968yaSjo6Pt7Ox42sC/RRNS3qZNG7bUko+6r0pKSuzt7YuKiqh1
DtRiti0T9dvIY5DC3NzcvXv3xsXFBQYG9u/fX80xWOQk/cGDB0zm2LFju3bt
yqdySDkAAAiILUE4JSXFx8eH0fEjR44wtW3atIn5NiIigrmBzscG/o2afuxN
dxZJEuzH0hISEqzopvFjb1z120hjS2FxcTE5y2bSI0eOZC62UwerQ4cOuqcZ
PTw8HBwc+NQPKQcAAAGxOghnZWVNmzbtxo0bv2th/mqJuffKFJgyZUpwcDBP
G/i3a0LKiR4tXLiQSZME+2H1rVu32i7lJuq3kcaWQk9PT+b6eWZmZq9evYiy
qzkGa9iwYczTjAqFonv37niCHQAAxI/VQZi55apj1KhRaq32EUUIDQ2dN2/e
2rVrdRfezdrAs9GVK1cSASLySv7VveqEfXmc6xUuhw8ffvbZZ3m2YqItrvpt
pLGl8Ny5c35+fsuWLSO/vjIyMphM6mCRzFWrVpFMLy8v8vMMr4gBAADxI4Yg
LLgBgiOGUbAFqdsPAACSRgxBWHADBEcMo2ALUrcfAAAkjRiCsOAGCI4YRsEW
pG4/AABIGjEEYcENEBwxjIItSN1+AACQNGIIwoIbIDhiGAVbkLr9AAAgacQQ
hAU3QHDEMAq2IHX7AQBA0oghCAtugOCIYRRsQer2AwCApBFDEBbcAMERwyjY
gtTtBwAASSOGICy4AYIjhlGwBanbDwAAkkYMQVhwA2zk8OHDS5cu3bZtGzuz
srLy3Xff5VmDGEbBFqRuPwAASBoxBGHBDbCdzVrYOXv27Hn55Zd5Hi6GUbAF
qdsPAACSRgxBmKcBH374YWBg4CoWjW0YfwykPCEh4fbt25ByAAAAjwGrg3BB
QUF4eHhsbGxoaOisWbN0+25YseEITwNGjhw5up6hQ4e+//77BgVUKtXGjRuJ
SREREcuXL2dM4rLTLH/++WdiYqKzszN7Fzau3rGlnIg4OZAkBJFyqtkMeXl5
M2fOZOdQu0MODAoKioqKIs5kOmIWSDkAAAiI1UHYx8dnzpw5TLpnz57MJqeR
kZFEBZhMktDt7m3WBj7F1qxZo0sTpS4pKTEosGHDhtOnTzPp6OjoJUuWcNnJ
B1JbTEwMe5NTE71jS/myZcuuaXnhhRfIv3zaakApNDZbx9y5c6dOnar7SO3O
H3/80bdv38zMTJIePny4p6fnY7YfAACApVgdhHfv3j1//nwm3bt3b2Zja1dX
V6IjTCZJkI88beBTjJxUMomUlBTqXuEeHh7kXJJJJycnMyZR7eSJwX7lJnrH
lvJb9fTp04f8y6ehhpVC6pbux48f3759O1vKqd357LPPRo4cyWTm5+czO5ub
BVIOAAACYnsQTktLa9WqVXp6Okl36tTp5MmTTD5JkI88bbCoRXJ2qVQqjfO/
+eabli1bktPS+/fvT5s2jTGJaidPDDSRq3enTp3y0nL48GEmp6KiIjo6ukuX
LkeOHOHTUGNLeXV1dXh4+NmzZ9lSTu1O//79AwMD4+Li9u7dm5uby7NFSDkA
AAiILUGYCFZsbKybm1t8fLyuNrY68KzZIgNIizt37uT6du3ataQ2Itk6k6h2
8sRAE63rHR8aW8qJjhM1N5ByanfIv05OTmVlZeTn0FtvvXX+/PnHbz8AAACL
sD0I5+fnOzo6MndaH4OUu7i4pKamUr/Kzs729vYm377zzjtNmzY1uFPPtpMn
fw0pJ245c+YMSfCUct09iICAgH79+j1++wEAAFiE1UFYLpc/ePCASY8dO7Zr
164k0aZNG7Y6kI88beDZaElJib29fVFREfXboUOH3r59mySIYZs3b2ZMotpp
wEAtxvkGmmhd7/jQqFK+bt06uZajR496eHiQBJNP7U7nzp2XL1/OZJIE/x9j
kHIAABAKq4Nwhw4dZs+ezaSJQDg4OKi1T1LpTntJomEfe1Nr/17bRGGDU8jn
nnuOy06eGD/2ZkXv+NCoUr6tHk9PT2dnZ91b6ajdGTly5IIFC5hMIuXt2rV7
/PYDAACwCKuD8LBhw5KTk0lCoVB0796duSobERGxcOFCpgBJUJ8zp9rAs9Gt
W7caF9adUxMZ0l17z8nJYf7wnGonTww00bre8eExPMFO2LlzJ/sCO7U7Bw4c
GDx4MJM5bty44OBgPi1CygEAQECsDsJEKVatWhUaGurl5eXj4/MYXhGj1r7t
/NlnnzVhkp+fX6gW3StiuOw0y8qVK729vYkmkn9Jmsm0ond8aEAppJpN+O67
78aMGdOvX7/Vq1frMqndIaft8+bNCwoK8vf3V6lUj9l+AAAAliKGICy4AYIj
hlGwBanbDwAAkkYMQVhwAwRHDKNgC1K3HwAAJI0YgrDgBgiOGEbBFqRuPwAA
SBoxBGHBDRAcMYyCLUjdfgAAkDRiCMKCGyA4YhgFW5C6/QAAIGnEEIQFN0Bw
xDAKtiB1+wEAQNKIIQgLboDgiGEUbEHq9gMAgKQRQxAW3ADBEcMo2ILU7QcA
AEkjhiAsuAGCI4ZRsAWp2w8AAJJGDEFYcANs5PDhw0uXLtW929zT03PcuHHj
tcyYMYNPDWIYBVuQuv0AACBpxBCEBTfAdjZrYdK7du1idiL78ccff/75Zz6H
i2EUbEHq9gMAgKSxOggXFBSEh4fHxsaGhobOmjWLebd5enr6oEGD/Pz8lixZ
Mnr06MzMTJ428ClmtnKuAh9++GFgYOAqFnya+/PPPxMTE52dnY33JTGGLeUM
WVlZ0dHRfBpSN5wUFhUVrVixYt26de7u7nPmzKmpqdF9RXoRFBQUFRW1ceNG
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
KLPKUoKauo/Z/1QlfVpqOXmlSl/RrduqTHZ31j76vqezd9itKtO/JUlD3Xru
4OsmOTaiaafVpganzv5b364vR6rvrfFrxG5y5IwyonCcIomTRnaamlxmSiMv
YfftSusklTcW9Ry1v9TU5RTXlw4Y9E1aFTXGWiQpje/n3Hr6kWKNXnp9ubCe
2/gTYgUZjo0k/+Yn8Og3MksrstNBHr4r2RscOxqSA2n+eBv2+FD8wbkrt1iF
lkRdrEKNhqqWtjB+lEezsTsPr120N0fFk5y8QEwRlTCjJXxq/pSU7Nq5Fik4
vqeslmpoblZSAuMHQUne6kUA3gP8PdKgeHAy7ruo+b1d2i4yLSXLE0P2V88P
DHbx/TZTZWkkmgcb/P1Cth9KfEnS2Swp71PCd3pXbn6Ayn646u86JFFsdBiN
/NzklkLz8y590c7eruZzVZKkIY2qe/X9ddW9uvJyaNsOYbfZJipLGevZJeqB
xrzA+7oG/PTMQJEjLYOc1RqcFfXdFT7O/Q9XmP+jyV7fsZ6v+V6E3qpN7VUg
NDUlddbaTq6BxyTsz/TFu8yPnul58grH6faavLhAN8YjYPqWs0XckFTpEUK/
xdy9kB6jY0mM5QcHuPaKK2IT0BXsMHW6CLY38sPhSkIkkH5jNZElV4yarmhP
Q2IgzR9vxR4fij84W3mNVWhJ1MkqtGjsLSbd0wNB7kynNZYtyiI55QIJRVTC
jBanU/On1MWenWuRwnYksVpqIN38601KYArbICjJv8BWDt4rNnukOufHiQPn
JBSoFVdCW3vzt3KjNHlUsx5bc7WWRmK6gxK2mpQieflSBrWkgv/dp/exlRds
9zevVYfRsOOr13bxLkdb+ZUZ9lu1niJHVgY5K605VqV91Ybp+kO+uSfrS/b2
dhZuzNHY3cpPB3myTUl5fW5L5z/9Q2Q+I1C9yVHyVBGFs/kURK9+dnn7zD5u
jMvwHbkaa0RLvJuOSKjWVK8oLRen0mJ0LAm3+Rkl/xzuJlyfrSDD4UpCJFB0
YQ6Rpa0YL7uiPQ2JgTR/vBV7fCj+4G7l1VahJVEnq1C3cjtqaQsOLg4O8Gg+
/mCJzlZyygVSiqiEGWvCp+dPq4sdO9ciBTc3ymqpgXTzneu0wGyDUJDJS7CV
g/eK4lJIM6fqLqq6vdTb7dNjYqOh4vh4D6/5N2QqNac3VaWFd++/mW1dpibl
8UnkfY1RfmGqZ/32Mw/nq4z6imvRG86X87dy9tjbXy9atnKD6undzJJX9zc3
TDOmt90t/JalW1o1+67ZUTTyc5NadlqZaXmbzo6XnRrj1m7pHZXRID4TKnAe
liQx33V5dQhLq2nVnaOyLa16X4lNq66RgzKrqZG08I1It22O8kszPJ0CYvK1
ZlmWdfFfa17n4sTBrj1inhB35eNM9xe/qfWl+wMbNRz0Y54pCl3hDn+XfiYN
iBmLbhGF01qLJL0YdYA9NqXJ3dbbg30MXFML8clg9/rC8CsSvVFTnLxx2+1K
aoyOJWGbn0vXLbnsJeqsdT06h98Rkz7SSrmS8BM4c+8XMkuOcmcmNPP5+k6l
UvyvC1QNyYFKCemPt2GPD8UfluJarUJNoi5WqaBFQ1VLmRm7JCZD/vxESBvB
6HjzsRlObc7yL5BSRCXMaAmfmj8lJXt2rk0KC5Q2p7U4gXRzFS0wfhCkWlKr
F/Wv2/UAqBsGZcGVfbN8GMZj9OZTWRK9oSIl1Itx7TZ69opvJ7ZkWgdvvyWt
TIv8c8cu47+J3blhwfSIxAKN0aDISZznzTQeGnW+UKV9lrzIvwHDMM5uflPi
823PiurEd4+u6teAES7cn/r85dmPskNDmPqBRyVvEib7eCwnaaEf02hA5JmH
+VdjgwRM65C/Z0r1OjvRGBQPjy4yjR+0/uyjJ1djx5vGf/FzukRTcuAvbvXb
9h8TErF+Rjum1cRt51OPhXep7xywOuVhccbBLzswboGbLuQX3YgLbs54Bu9K
E8sIOUxp2s6qkj84sljI1O8WlpQttzltU35uaUCrbtM27oqO+Dw0OqPSYFA+
ufD92GaMy9DIo6lPVZZjWPLshC99mEaDoy6ValUP9wa3dfLoNS503txPWzCe
o7+7JFLx8iQLd7PYWqRniSM+HrBo9/Hk3QsnfJUs4oSkLU6cI/yIqde0hffA
sBSRjhKjTpmX7FiS0oMDnBr3XRB37NQvK4MnRN6QGohwoi+mJthIQhSKlqXl
tJA2L3ZQY5fukyLPlGoIDblOqRm4LulKAsUfmje0R8zVwpxaxHgv/uCswMei
rGqrXHx0j5pELVaZuPlQPDUaftj/qczaM1nYLzJNbtAWH5wkYJz9FydkK9TW
2qhtLsitoIpakcQ14zMJx+mk96h1eWzHztZVY0eKmpG0Nmd5lXLCzbTCGCVJ
vCAIR3NMq3udrgfAm6GRlUnYr6TolHLLN1P0SlFuTqHE3kFMg7os935uHf/E
lVbypED6Lr/6+UrRGHWygpxCuc6gKissr+u7ZpocdZ3VoHr+MPN+kezVDrXq
5MWPCiUajbhIZHkozJ+RVrjqkZoqdVVZblZ2kYwivF5ZmptbquR08VeM0fxI
cseDwuzMHM7flrMfjmUavmS0LK2DK5U1wTuMjzuwTrM65HXs8T/wR20vWmer
1HalnUGc2tR2gWMz1iX/Wl6hbtiVgO5mIjBqEPzkrcK8864HAABvhKFsf/8m
5Ie5APwBgZsBAP+HqEuu7Jrdp73/1O2XivH3MsEfG7gZAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAACAd89/AcKG/yk=
    "], {{0, 513}, {665, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{665, 513},
  PlotRange->{{0, 665}, {0, 513}}]], "Text"]], "Text",
 CellChangeTimes->{3.5896244970983744`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Needs", "[", "\"\<GraphUtilities`\>\"", "]"}], "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"imSucc", "[", 
     RowBox[{"g_", ",", "v_"}], "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"IncidenceList", "[", 
        RowBox[{"g", ",", " ", "v", ",", " ", "1"}], "]"}], ",", " ", 
       RowBox[{"(", 
        RowBox[{"v", " ", "\[DirectedEdge]", " ", "_"}], ")"}]}], "]"}], 
     "\[LeftDoubleBracket]", 
     RowBox[{"All", ",", " ", "2"}], "\[RightDoubleBracket]"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"AssignWrapper", "[", "g_", "]"}], " ", ":=", " ", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", "\n", "\t", 
       RowBox[{
        RowBox[{"graph", " ", "=", " ", 
         RowBox[{"Fold", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"SetProperty", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"#1", ",", 
                RowBox[{"{", 
                 RowBox[{"#2", ",", "#2"}], "}"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Visited", " ", "\[Rule]", " ", "False"}], ",", 
                RowBox[{"LEF", " ", "\[Rule]", " ", "0"}]}], "}"}]}], "]"}], 
            "&"}], ",", " ", "g", ",", " ", 
           RowBox[{"VertexList", "[", "g", "]"}]}], "]"}]}], ",", "\n", "\t", 
        RowBox[{"src", "   ", "=", " ", 
         RowBox[{"{", "}"}]}], ",", "\n", "\t", 
        RowBox[{"dst", "   ", "=", " ", 
         RowBox[{"First", "@", 
          RowBox[{"VertexList", "[", 
           RowBox[{"g", ",", 
            RowBox[{"_", "?", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"VertexOutDegree", "[", 
                 RowBox[{"g", ",", "#"}], "]"}], " ", "\[Equal]", " ", "0"}], 
               "&"}], ")"}]}]}], "]"}]}]}]}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"Print", "[", "dst", "]"}], ";", "\n", "\t", 
       RowBox[{
        RowBox[{"Assign", "[", 
         RowBox[{"dst", ",", 
          RowBox[{"SetProperty", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"graph", ",", 
              RowBox[{"{", "dst", "}"}]}], "}"}], ",", " ", 
            RowBox[{"LEF", " ", "\[Rule]", " ", "1"}]}], "]"}], ",", " ", 
          "src"}], "]"}], "\[LeftDoubleBracket]", "1", 
        "\[RightDoubleBracket]"}]}]}], "\n", "]"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"Assign", "[", 
     RowBox[{"end_", ",", "graph_", ",", "vertex_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"f", ",", "iGraph", ",", "rGraph", ",", "rE"}], "}"}], ",", 
      "\n", "\t\t", 
      RowBox[{"(*", "\n", "\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"g_", ",", "e_"}], "}"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"v2_", "?", " ", "VertexOutDegree"}], "[", 
             RowBox[{"g", ",", "v2"}], "]"}], " ", "\[Equal]", " ", "0"}]}], 
          "]"}], "      ", ":=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Print", "[", "v2", "]"}], ";", 
           RowBox[{"{", 
            RowBox[{"g", ",", " ", "1"}], "}"}]}], ")"}]}], ";", "\n", "\t\t", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"g_", ",", "e_"}], "}"}], ",", " ", 
           RowBox[{"v2_", "/;", " ", 
            RowBox[{"PropertyValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"g", ",", "v2"}], "}"}], ",", " ", "Visited"}], 
             "]"}]}]}], "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"g", ",", " ", 
           RowBox[{"e", " ", "+", " ", 
            RowBox[{"PropertyValue", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"g", ",", "v2"}], "}"}], ",", " ", "LEF"}], "]"}]}]}], 
          "}"}]}], ";", "\n", "\t\t", 
        RowBox[{
         RowBox[{"f", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"g_", ",", "e_"}], "}"}], ",", " ", "v2_"}], "]"}], 
         "                                   ", ":=", " ", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"r", "=", 
             RowBox[{"Assign", "[", 
              RowBox[{"g", ",", "v2"}], "]"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
             "r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              " ", 
             RowBox[{"e", " ", "+", " ", 
              RowBox[{
              "r", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}],
             "}"}]}], "]"}]}], ";"}], "\n", "\t\t", "*)"}], "\n", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"f", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"g_", ",", "e_"}], "}"}], ",", " ", "v2_"}], "]"}], " ", ":=",
         " ", 
        RowBox[{"Piecewise", "[", 
         RowBox[{
          RowBox[{"{", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"g", ",", "1"}], "}"}], ",", " ", 
              RowBox[{"v2", " ", "\[Equal]", " ", "end"}]}], "}"}], ",", "\n",
             "\t\t\t", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"g", ",", " ", 
                RowBox[{"e", " ", "+", " ", 
                 RowBox[{"PropertyValue", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"g", ",", "v2"}], "}"}], ",", " ", "LEF"}], 
                  "]"}]}]}], "}"}], ",", " ", 
              RowBox[{"PropertyValue", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"g", ",", "v2"}], "}"}], ",", " ", "Visited"}], 
               "]"}]}], "}"}]}], "\n", "\t\t\t", "}"}], ",", "\n", "\t\t\t", 
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"r", "=", 
              RowBox[{"Assign", "[", 
               RowBox[{"end", ",", "g", ",", "v2"}], "]"}]}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "r", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
              ",", " ", 
              RowBox[{"e", " ", "+", " ", 
               RowBox[{
               "r", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}]}], "}"}]}], "]"}]}], "\n", "\t\t",
          "]"}]}], ";", "\n", "\t\t", 
       RowBox[{"iGraph", "      ", "=", " ", 
        RowBox[{"SetProperty", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"graph", ",", 
            RowBox[{"{", "vertex", "}"}]}], "}"}], ",", " ", 
          RowBox[{"Visited", " ", "\[Rule]", " ", "True"}]}], "]"}]}], ";", 
       "\n", "\t\t", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rGraph", ",", "rE"}], "}"}], " ", "=", " ", 
        RowBox[{"Fold", "[", 
         RowBox[{"f", ",", " ", 
          RowBox[{"{", 
           RowBox[{"iGraph", ",", "0"}], "}"}], ",", " ", 
          RowBox[{"imSucc", "[", 
           RowBox[{"iGraph", ",", "vertex"}], "]"}]}], "]"}]}], ";", "\n", 
       "\t\t", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"SetProperty", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"rGraph", ",", 
             RowBox[{"{", "vertex", "}"}]}], "}"}], ",", " ", 
           RowBox[{"LEF", " ", "\[Rule]", " ", "rE"}]}], "]"}], ",", " ", 
         "rE"}], "}"}]}]}], "\n", "\t", "]"}]}], "\n", 
   RowBox[{"(*", 
    RowBox[{"**", "**", "**", "**"}], "*****)"}], "\n", 
   RowBox[{
    RowBox[{"setProps", "[", 
     RowBox[{"g_", ",", "prop_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Fold", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"SetProperty", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"#1", ",", 
           RowBox[{"{", "#2", "}"}]}], "}"}], ",", " ", 
         RowBox[{"VertexLabels", " ", "\[Rule]", " ", 
          RowBox[{"PropertyValue", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"#1", ",", "#2"}], "}"}], ",", " ", "prop"}], "]"}]}]}], 
        "]"}], "&"}], ",", " ", "g", ",", " ", 
      RowBox[{"VertexList", "[", "g", "]"}]}], "]"}]}], " ", "\n", "\n", 
   RowBox[{
    RowBox[{"lattice", " ", "=", " ", 
     RowBox[{"idealLattice", "[", "testGraph", "]"}]}], ";"}], "\n", 
   RowBox[{"(*", "\n", 
    RowBox[{
     RowBox[{"lattice2", " ", "=", " ", 
      RowBox[{"AssignWrapper", "[", "lattice", "]"}]}], ";", "\n", 
     RowBox[{"setProps", "[", 
      RowBox[{"lattice2", ",", "Visited"}], "]"}], ";", "\n", 
     RowBox[{
      RowBox[{"setProps", "[", 
       RowBox[{"lattice2", ",", "LEF"}], "]"}], "\n", 
      RowBox[{"PropertyValue", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"lattice2", ",", 
          RowBox[{"{", "}"}]}], "}"}], ",", " ", "LEF"}], "]"}]}]}], "\n", 
    "*)"}], "\n", "\n", 
   RowBox[{
    RowBox[{"idealLatticeLECount", "[", "l_", "]"}], " ", ":=", " ", 
    RowBox[{"PropertyValue", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"AssignWrapper", "[", "l", "]"}], ",", 
        RowBox[{"{", "}"}]}], "}"}], ",", " ", "LEF"}], "]"}]}], "\n", 
   RowBox[{"idealLatticeLECount", "[", "lattice", "]"}], "\n", "\n", 
   RowBox[{
    RowBox[{"widthTest", " ", "=", " ", 
     RowBox[{"AssignWrapper", "[", 
      RowBox[{"idealLattice", "[", 
       RowBox[{"System`Graph", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"2", "\[DirectedEdge]", "4"}], ",", 
          RowBox[{"1", "\[DirectedEdge]", "3"}], ",", 
          RowBox[{"1", "\[DirectedEdge]", "4"}], ",", 
          RowBox[{"3", "\[DirectedEdge]", "5"}], ",", 
          RowBox[{"4", "\[DirectedEdge]", "6"}], ",", 
          RowBox[{"3", "\[DirectedEdge]", "7"}]}], "}"}], "]"}], "]"}], 
      "]"}]}], ";"}], "\n", 
   RowBox[{"setProps", "[", 
    RowBox[{"widthTest", ",", "LEF"}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.589446389840158*^9, 3.5894464145973225`*^9}, {
   3.589446586374318*^9, 3.5894466001510825`*^9}, {3.58944664645501*^9, 
   3.589446679477233*^9}, {3.589446718607247*^9, 3.589446718686252*^9}, {
   3.5894467743833866`*^9, 3.5894467808082094`*^9}, {3.5894468284713125`*^9, 
   3.5894468583511314`*^9}, {3.589446982463021*^9, 3.5894470026716084`*^9}, {
   3.5894470479524097`*^9, 3.5894470696961884`*^9}, {3.5894471035435266`*^9, 
   3.58944712559935*^9}, {3.58944726812059*^9, 3.58944733631332*^9}, {
   3.5894482760436287`*^9, 3.5894483384746156`*^9}, {3.5894483703387003`*^9, 
   3.5894484123470783`*^9}, {3.5894484449952583`*^9, 
   3.5894485978918266`*^9}, {3.589448716461008*^9, 3.589448867854392*^9}, {
   3.589449718644305*^9, 3.589449842960225*^9}, {3.5894498881850104`*^9, 
   3.589449967301138*^9}, {3.5894500072052464`*^9, 3.5894500334626083`*^9}, {
   3.5894500783593564`*^9, 3.5894501374329185`*^9}, 3.589450298728571*^9, {
   3.5894504393295665`*^9, 3.5894506851140327`*^9}, {3.589450734163312*^9, 
   3.5894508116342287`*^9}, {3.589450844630454*^9, 3.5894509174787793`*^9}, {
   3.589451013052015*^9, 3.5894510482335186`*^9}, {3.5894511149800625`*^9, 
   3.589451193983177*^9}, {3.589451226715373*^9, 3.5894512628249955`*^9}, {
   3.5894513017409725`*^9, 3.5894513020910177`*^9}, {3.5894513432852917`*^9, 
   3.589451378363782*^9}, {3.589451436532228*^9, 3.5894514711106606`*^9}, 
   3.58945160171238*^9, {3.5894517108053465`*^9, 3.589451738915945*^9}, {
   3.5894518303566513`*^9, 3.5894518313957787`*^9}, {3.589451900501625*^9, 
   3.5894519069554567`*^9}, {3.589451989741055*^9, 3.589452006605214*^9}, {
   3.5894521196936865`*^9, 3.5894521777991266`*^9}, {3.5894523453515806`*^9, 
   3.589452367591428*^9}, {3.589452419209031*^9, 3.589452466518092*^9}, {
   3.5894525042949286`*^9, 3.5894525546003637`*^9}, {3.5894526751667976`*^9, 
   3.589452767550625*^9}, {3.589452800310824*^9, 3.5894528007188716`*^9}, {
   3.5894528347762313`*^9, 3.589452838989771*^9}, {3.5894529161826525`*^9, 
   3.589453097349845*^9}, {3.58945312991302*^9, 3.5894531510287175`*^9}, {
   3.58945321408479*^9, 3.5894532892004066`*^9}, {3.5894534524033003`*^9, 
   3.5894534641108036`*^9}, {3.5894534953988085`*^9, 
   3.5894537484371977`*^9}, {3.5894537831126423`*^9, 3.589453893192729*^9}, {
   3.5894539329688215`*^9, 3.5894540188068104`*^9}, {3.589454071104511*^9, 
   3.5894540948625526`*^9}, {3.589454164543471*^9, 3.5894542223968782`*^9}, {
   3.58945429903869*^9, 3.5894543081178536`*^9}, {3.589454554066334*^9, 
   3.5894545995661592`*^9}, {3.5894547616439133`*^9, 
   3.5894549515162153`*^9}, {3.589455153678096*^9, 3.5894551900417566`*^9}, {
   3.5894552538589263`*^9, 3.5894552597056694`*^9}, {3.589455294075075*^9, 
   3.5894553156588373`*^9}, {3.5894554771615133`*^9, 
   3.5894554805139427`*^9}, {3.5894556352287493`*^9, 
   3.5894556354037666`*^9}, {3.5894567405992584`*^9, 3.589456775125678*^9}, {
   3.589456857983286*^9, 3.5894568956791115`*^9}, {3.589456929898487*^9, 
   3.5894570731878366`*^9}, {3.5894571110206795`*^9, 
   3.5894573031032705`*^9}, {3.5894573703598795`*^9, 3.58945740968791*^9}, {
   3.589457515211419*^9, 3.589457663262377*^9}, {3.5894576954404964`*^9, 
   3.5894577099403534`*^9}, {3.5894589781877136`*^9, 3.589458978644772*^9}, {
   3.5894590825470724`*^9, 3.589459093119423*^9}, 3.5896341568780146`*^9, {
   3.589634449691501*^9, 3.589634455024189*^9}, {3.5896345044305134`*^9, 
   3.5896345074148965`*^9}, {3.589634581284353*^9, 3.5896345819314356`*^9}, {
   3.5896347038210397`*^9, 3.5896347106919193`*^9}, {3.5896348412216253`*^9, 
   3.589634852866121*^9}, {3.5896349563593655`*^9, 3.589635037416747*^9}, {
   3.589635749515909*^9, 3.5896357713076997`*^9}, {3.5896358623723574`*^9, 
   3.589635889763864*^9}, {3.589635998455778*^9, 3.5896361166269064`*^9}, {
   3.589636174956374*^9, 3.5896363846052074`*^9}, {3.5896366664702926`*^9, 
   3.589636675213417*^9}, 3.589636715878623*^9, {3.589636771189698*^9, 
   3.589636772972927*^9}, {3.589637020734646*^9, 3.5896370502704315`*^9}, {
   3.5896370963673334`*^9, 3.589637144191455*^9}, {3.589637188488121*^9, 
   3.589637256644847*^9}, {3.5896372965339518`*^9, 3.589637410494548*^9}, 
   3.5896374488644543`*^9, {3.589637479623397*^9, 3.589637544020641*^9}, {
   3.5896376093760023`*^9, 3.5896376095840287`*^9}, {3.5896376642970333`*^9, 
   3.5896376871129546`*^9}, {3.589637735553156*^9, 3.5896377665201197`*^9}, {
   3.5896379399203243`*^9, 3.5896379657006245`*^9}, {3.5896380487782545`*^9, 
   3.589638057732401*^9}, {3.5899116298873863`*^9, 3.5899116941976194`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Print",
 CellChangeTimes->{
  3.589637545656845*^9, 3.5896376102881193`*^9, {3.589637673688236*^9, 
   3.5896376875300074`*^9}, 3.5896377830572405`*^9, {3.589637944656926*^9, 
   3.589637966965782*^9}, {3.58963804568886*^9, 3.589638058224464*^9}, 
   3.5896396939178653`*^9, 3.5897402249398117`*^9, {3.5899116104168987`*^9, 
   3.589911630573474*^9}, {3.5899116664850717`*^9, 3.589911695408774*^9}}],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{{3.5896367175478315`*^9, 3.5896367358421736`*^9}, 
   3.5896367738400373`*^9, 3.589637053404827*^9, {3.589637099111685*^9, 
   3.589637144627511*^9}, {3.5896371939938307`*^9, 3.589637208898735*^9}, 
   3.5896373391434135`*^9, {3.5896373770702667`*^9, 3.589637386056413*^9}, {
   3.589637444940957*^9, 3.5896374498725824`*^9}, {3.589637483745922*^9, 
   3.589637515280962*^9}, 3.589637545692855*^9, 3.589637610323124*^9, {
   3.589637673684235*^9, 3.5896376875330086`*^9}, 3.5896377830612373`*^9, {
   3.589637944664926*^9, 3.5896379669717817`*^9}, {3.589638045691861*^9, 
   3.589638058230466*^9}, 3.5896396939258695`*^9, 3.589740224960809*^9, {
   3.5899116104198933`*^9, 3.58991163057748*^9}, {3.589911666488072*^9, 
   3.5899116954117756`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], 
  "}"}]], "Print",
 CellChangeTimes->{
  3.589637545656845*^9, 3.5896376102881193`*^9, {3.589637673688236*^9, 
   3.5896376875300074`*^9}, 3.5896377830572405`*^9, {3.589637944656926*^9, 
   3.589637966965782*^9}, {3.58963804568886*^9, 3.589638058224464*^9}, 
   3.5896396939178653`*^9, 3.5897402249398117`*^9, {3.5899116104168987`*^9, 
   3.589911630573474*^9}, {3.5899116664850717`*^9, 3.589911695428776*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{{}, {1}, {2}, {1, 2}, {1, 3}, {1, 2, 3}, {1, 2, 4}, {1, 3, 5}, {1,
        3, 7}, {1, 2, 3, 4}, {1, 2, 3, 5}, {1, 2, 3, 7}, {1, 2, 4, 6}, {1, 3, 
       5, 7}, {1, 2, 3, 4, 5}, {1, 2, 3, 4, 6}, {1, 2, 3, 4, 7}, {1, 2, 3, 5, 
       7}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 7}, {1, 2, 3, 4, 6, 7}, {1, 2, 
       3, 4, 5, 6, 7}}, {{{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 4}, {4, 6}, {4, 
       7}, {5, 6}, {5, 8}, {5, 9}, {6, 10}, {6, 11}, {6, 12}, {7, 10}, {7, 
       13}, {8, 11}, {8, 14}, {9, 12}, {9, 14}, {10, 15}, {10, 16}, {10, 
       17}, {11, 15}, {11, 18}, {12, 17}, {12, 18}, {13, 16}, {14, 18}, {15, 
       19}, {15, 20}, {16, 19}, {16, 21}, {17, 20}, {17, 21}, {18, 20}, {19, 
       22}, {20, 22}, {21, 22}}, Null}, {
      Properties -> {{1, 3, 
          7} -> {$CellContext`LEF -> 4, $CellContext`Visited -> True}, {1, 2, 
          3, 4} -> {$CellContext`LEF -> 6, $CellContext`Visited -> True}, {1, 
          2, 3, 4, 
          7} -> {$CellContext`LEF -> 2, $CellContext`Visited -> True}, {
          2} -> {$CellContext`LEF -> 20, $CellContext`Visited -> True}, {1, 2,
           3, 4, 5, 
          7} -> {$CellContext`LEF -> 1, $CellContext`Visited -> True}, {1, 2, 
          3, 4, 5} -> {$CellContext`LEF -> 2, $CellContext`Visited -> True}, {
          1, 2, 4} -> {$CellContext`LEF -> 8, $CellContext`Visited -> True}, {
          1, 3} -> {$CellContext`LEF -> 20, $CellContext`Visited -> True}, {1,
           2, 3, 4, 6, 
          7} -> {$CellContext`LEF -> 1, $CellContext`Visited -> True}, {1, 2, 
          3, 7} -> {$CellContext`LEF -> 3, $CellContext`Visited -> True}, {1, 
          2, 3, 4, 5, 
          6} -> {$CellContext`LEF -> 1, $CellContext`Visited -> True}, {1, 
          2} -> {$CellContext`LEF -> 20, $CellContext`Visited -> True}, {1, 2,
           4, 6} -> {$CellContext`LEF -> 2, $CellContext`Visited -> True}, {1,
           3, 5} -> {$CellContext`LEF -> 4, $CellContext`Visited -> True}, {1,
           2, 3, 4, 
          6} -> {$CellContext`LEF -> 2, $CellContext`Visited -> True}, {1, 3, 
          5, 7} -> {$CellContext`LEF -> 1, $CellContext`Visited -> True}, {1, 
          2, 3, 4, 5, 6, 
          7} -> {$CellContext`LEF -> 1, $CellContext`Visited -> False}, {1, 2,
           3, 5, 7} -> {$CellContext`LEF -> 1, $CellContext`Visited -> 
           True}, {1, 2, 
          3} -> {$CellContext`LEF -> 12, $CellContext`Visited -> True}, {1, 2,
           3, 5} -> {$CellContext`LEF -> 3, $CellContext`Visited -> 
           True}, {} -> {$CellContext`LEF -> 60, $CellContext`Visited -> 
           True}, {1} -> {$CellContext`LEF -> 40, $CellContext`Visited -> 
           True}}, VertexLabels -> {
        "Name", {1, 2} -> 20, {1, 2, 3, 4, 5, 6} -> 1, {1, 3, 5} -> 
         4, {1, 2, 3, 4, 5} -> 2, {1, 2, 3, 7} -> 3, {1, 2, 3, 4} -> 6, {2} -> 
         20, {1, 3, 5, 7} -> 1, {1, 2, 3, 5, 7} -> 1, {1, 2, 3, 4, 7} -> 
         2, {1, 3} -> 20, {1, 2, 4, 6} -> 2, {1, 2, 3, 4, 5, 6, 7} -> 
         1, {1, 2, 4} -> 8, {1, 2, 3, 4, 6} -> 2, {1, 2, 3, 5} -> 
         3, {1, 2, 3, 4, 6, 7} -> 1, {} -> 60, {1, 3, 7} -> 4, {1} -> 
         40, {1, 2, 3, 4, 5, 7} -> 1, {1, 2, 3} -> 12}}]], Typeset`boxes, 
    Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.019671594508975713`], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$2", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$3", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$2", Automatic, Center], 
         DynamicLocation["VertexID$4", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$2", Automatic, Center], 
         DynamicLocation["VertexID$5", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$3", Automatic, Center], 
         DynamicLocation["VertexID$4", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$4", Automatic, Center], 
         DynamicLocation["VertexID$6", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$4", Automatic, Center], 
         DynamicLocation["VertexID$7", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$5", Automatic, Center], 
         DynamicLocation["VertexID$6", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$5", Automatic, Center], 
         DynamicLocation["VertexID$8", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$5", Automatic, Center], 
         DynamicLocation["VertexID$9", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], 
         DynamicLocation["VertexID$10", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], 
         DynamicLocation["VertexID$11", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], 
         DynamicLocation["VertexID$12", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$7", Automatic, Center], 
         DynamicLocation["VertexID$10", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$7", Automatic, Center], 
         DynamicLocation["VertexID$13", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$8", Automatic, Center], 
         DynamicLocation["VertexID$11", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$8", Automatic, Center], 
         DynamicLocation["VertexID$14", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$9", Automatic, Center], 
         DynamicLocation["VertexID$12", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$9", Automatic, Center], 
         DynamicLocation["VertexID$14", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$10", Automatic, Center], 
         DynamicLocation["VertexID$15", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$10", Automatic, Center], 
         DynamicLocation["VertexID$16", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$10", Automatic, Center], 
         DynamicLocation["VertexID$17", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$11", Automatic, Center], 
         DynamicLocation["VertexID$15", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$11", Automatic, Center], 
         DynamicLocation["VertexID$18", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$12", Automatic, Center], 
         DynamicLocation["VertexID$17", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$12", Automatic, Center], 
         DynamicLocation["VertexID$18", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$13", Automatic, Center], 
         DynamicLocation["VertexID$16", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$14", Automatic, Center], 
         DynamicLocation["VertexID$18", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$15", Automatic, Center], 
         DynamicLocation["VertexID$19", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$15", Automatic, Center], 
         DynamicLocation["VertexID$20", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$16", Automatic, Center], 
         DynamicLocation["VertexID$19", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$16", Automatic, Center], 
         DynamicLocation["VertexID$21", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$17", Automatic, Center], 
         DynamicLocation["VertexID$20", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$17", Automatic, Center], 
         DynamicLocation["VertexID$21", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$18", Automatic, Center], 
         DynamicLocation["VertexID$20", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$19", Automatic, Center], 
         DynamicLocation["VertexID$22", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$20", Automatic, Center], 
         DynamicLocation["VertexID$22", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$21", Automatic, Center], 
         DynamicLocation["VertexID$22", Automatic, Center]}]}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          DiskBox[{0., 7.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox[
          FormBox["60", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 6.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox["40", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 6.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox["20", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 5.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox["20", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 5.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox["20", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$5"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 4.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$6"], 
         InsetBox[
          FormBox["12", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$6"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 4.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$7"], 
         InsetBox[
          FormBox["8", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$7", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$7"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 4.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$8"], 
         InsetBox[
          FormBox["4", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$8", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$8"], 
       TagBox[{
         TagBox[
          DiskBox[{2., 4.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$9"], 
         InsetBox[
          FormBox["4", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$9", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$9"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$10"], 
         InsetBox[
          FormBox["6", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$10", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$10"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$11"], 
         InsetBox[
          FormBox["3", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$11", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$11"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$12"], 
         InsetBox[
          FormBox["3", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$12", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$12"], 
       TagBox[{
         TagBox[
          DiskBox[{-2., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$13"], 
         InsetBox[
          FormBox["2", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$13", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$13"], 
       TagBox[{
         TagBox[
          DiskBox[{2., 3.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$14"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$14", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$14"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 2.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$15"], 
         InsetBox[
          FormBox["2", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$15", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$15"], 
       TagBox[{
         TagBox[
          DiskBox[{-2., 2.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$16"], 
         InsetBox[
          FormBox["2", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$16", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$16"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 2.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$17"], 
         InsetBox[
          FormBox["2", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$17", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$17"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 2.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$18"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$18", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$18"], 
       TagBox[{
         TagBox[
          DiskBox[{-2., 1.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$19"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$19", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$19"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 1.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$20"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$20", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$20"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 1.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$21"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$21", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$21"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 0.}, 0.05338164251207729], "DynamicName", BoxID -> 
          "VertexID$22"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          Offset[{2, 2}, 
           DynamicLocation["VertexID$22", Automatic, {Right, Top}]], 
          ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$22"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9654210944905053`, 
       251.10534014790437`}, {-219.01479527750794`, 209.23319574928914`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.5896367175478315`*^9, 3.5896367358421736`*^9}, 
   3.5896367738400373`*^9, 3.589637053404827*^9, {3.589637099111685*^9, 
   3.589637144627511*^9}, {3.5896371939938307`*^9, 3.589637208898735*^9}, 
   3.5896373391434135`*^9, {3.5896373770702667`*^9, 3.589637386056413*^9}, {
   3.589637444940957*^9, 3.5896374498725824`*^9}, {3.589637483745922*^9, 
   3.589637515280962*^9}, 3.589637545692855*^9, 3.589637610323124*^9, {
   3.589637673684235*^9, 3.5896376875330086`*^9}, 3.5896377830612373`*^9, {
   3.589637944664926*^9, 3.5896379669717817`*^9}, {3.589638045691861*^9, 
   3.589638058230466*^9}, 3.5896396939258695`*^9, 3.589740224960809*^9, {
   3.5899116104198933`*^9, 3.58991163057748*^9}, {3.589911666488072*^9, 
   3.5899116956788087`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"VertexList", "[", 
  RowBox[{"testLarge", ",", 
   RowBox[{"_", "?", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"VertexOutDegree", "[", 
        RowBox[{"testLarge", ",", "#"}], "]"}], " ", ">", " ", "7"}], "&"}], 
     ")"}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"VertexCount", "[", "testLarge", "]"}]}], "Input",
 CellChangeTimes->{{3.589638481927712*^9, 3.5896385187114153`*^9}, {
  3.5896385789131227`*^9, 3.5896386338961663`*^9}, {3.589638684000581*^9, 
  3.5896387085207195`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"8", ",", "9", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "8", ",", "9", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "8", ",", "9", ",", "12", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "8", ",", "9", ",", "12", ",", "15"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "8", ",", "9", ",", "12", ",", "15"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "8", ",", "9", ",", "12", ",", "15"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "8", ",", "9", ",", "12", ",", "15"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "5", ",", "8", ",", "9", ",", "12", ",", "15"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "5", ",", "6", ",", "8", ",", "9", ",", "12", ",", "15"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "9", ",", "12", ",", 
     "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "5", ",", "6", ",", "8", ",", "9", ",", "12", ",", 
     "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "5", ",", "6", ",", "8", ",", "9", ",", 
     "12", ",", "15"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5896384980507703`*^9, 3.589638519383501*^9}, {
  3.5896385810493956`*^9, 3.589638634418228*^9}, {3.5896386845216475`*^9, 
  3.5896387091297927`*^9}}],

Cell[BoxData["2100"], "Output",
 CellChangeTimes->{{3.5896384980507703`*^9, 3.589638519383501*^9}, {
  3.5896385810493956`*^9, 3.589638634418228*^9}, {3.5896386845216475`*^9, 
  3.589638709133793*^9}}]
}, Open  ]],

Cell["\<\
 {1, 2, 3, 4, 5}, (* R,L,R,L,R *)
  {1, 2, 3, 5, 4},(* R,L,R,R,L *)
  {1, 2, 4, 3, 5},(* R,L,L,R,R *)
  {1, 3, 2, 4, 5},(* R,R,L,L,R *)
  {1, 3, 2, 5, 4},(*           *)
  {1, 3, 5, 2, 4},(*           *)
  {2, 1, 3, 4, 5},(*           *)
  {2, 1, 3, 5, 4},(*           *)
  {2, 1, 4, 3, 5}, (*           *)
  \
\>", "Text",
 CellChangeTimes->{{3.589618335813608*^9, 3.5896184058115706`*^9}, {
  3.589618443074345*^9, 3.5896184969632444`*^9}, {3.589619152723195*^9, 
  3.5896191800916986`*^9}, {3.5896192159872932`*^9, 3.589619282371792*^9}, {
  3.5896347703945627`*^9, 3.5896347821550684`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\n", 
  RowBox[{
   RowBox[{
    RowBox[{"lattice", " ", "=", " ", 
     RowBox[{"AssignWrapper", "[", 
      RowBox[{"idealLattice", "[", "testGraph", "]"}], "]"}]}], ";"}], "\n", 
   "\n", 
   RowBox[{
    RowBox[{"genRandLE", "[", "g_", "]"}], " ", ":=", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"v", "=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"le", "=", 
         RowBox[{"{", "}"}]}], ",", " ", "t", ",", " ", "c", ",", " ", "r"}], 
       "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"imSucc", "[", 
           RowBox[{"g", ",", "v"}], "]"}], " ", "\[NotEqual]", " ", 
          RowBox[{"{", "}"}]}], ",", "\n", "\t\t", 
         RowBox[{
          RowBox[{"t", " ", "=", " ", 
           RowBox[{"PropertyValue", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"g", ",", "v"}], "}"}], ",", " ", "LEF"}], "]"}]}], ";",
           "\n", "\t\t", 
          RowBox[{"c", " ", "=", " ", "0"}], ";", "\n", "\t\t", 
          RowBox[{"r", " ", "=", " ", 
           RowBox[{"RandomInteger", "[", 
            RowBox[{"{", 
             RowBox[{"1", ",", "t"}], "}"}], "]"}]}], ";", "\n", "\t\t", 
          RowBox[{"Do", " ", "[", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{
             RowBox[{"c", " ", "+=", " ", 
              RowBox[{"PropertyValue", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"g", ",", "v2"}], "}"}], ",", " ", "LEF"}], "]"}]}], 
             ";", "\n", "\t\t\t", 
             RowBox[{"If", " ", "[", 
              RowBox[{
               RowBox[{"r", " ", "\[LessEqual]", " ", "c"}], ",", " ", "\n", 
               "\t\t\t\t", 
               RowBox[{
                RowBox[{"AppendTo", "[", 
                 RowBox[{"le", ",", " ", 
                  RowBox[{"First", "@", 
                   RowBox[{"Complement", "[", 
                    RowBox[{"v2", ",", "v"}], "]"}]}]}], "]"}], ";", "\n", 
                "\t\t\t\t", 
                RowBox[{"v", " ", "=", " ", "v2"}], ";", "\n", "\t\t\t\t", 
                RowBox[{"Break", "[", "]"}]}]}], "\n", "\t\t\t\t", "]"}]}], 
            "\t", "\n", "\t\t", ",", " ", 
            RowBox[{"{", 
             RowBox[{"v2", ",", 
              RowBox[{"imSucc", "[", 
               RowBox[{"g", ",", "v"}], "]"}]}], "}"}]}], " ", "]"}], ";"}]}],
         "\n", "\t", "]"}], ";", "\n", "\t", "le"}]}], "\n", "]"}]}], "\n", 
   "\n", 
   RowBox[{
    RowBox[{"genWalkLE", "[", 
     RowBox[{"g_", ",", "root_", ",", "le_", ",", "all2_"}], "]"}], " ", ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"walkSub", ",", "extend"}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{
        RowBox[{"extend", "[", "v_", "]"}], "                ", ":=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"le", ",", 
          RowBox[{"First", "@", 
           RowBox[{"Complement", "[", 
            RowBox[{"v", ",", "root"}], "]"}]}]}], "]"}]}], ";", "\n", "\t", 
       RowBox[{
        RowBox[{"walkSub", "[", 
         RowBox[{"sle_", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], 
         "]"}], " ", ":=", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"sle", ",", " ", 
          RowBox[{"extend", "[", 
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
           "]"}]}], "]"}]}], ";", "\n", "\t", 
       RowBox[{
        RowBox[{"walkSub", "[", 
         RowBox[{"sle_", ",", "v_"}], "]"}], "          ", ":=", " ", 
        RowBox[{"genWalkLE", "[", 
         RowBox[{"g", ",", "v", ",", 
          RowBox[{"extend", "[", "v", "]"}], ",", " ", "sle"}], "]"}]}], ";", 
       "\n", "\t", 
       RowBox[{"Fold", "[", 
        RowBox[{"walkSub", ",", " ", "all2", ",", " ", 
         RowBox[{"imSucc", "[", 
          RowBox[{"g", ",", "root"}], "]"}]}], "]"}]}]}], "\n", "]"}]}], "\n",
    "\n", 
   RowBox[{"genWalkLE", "[", 
    RowBox[{"lattice", ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], "\n", "\n", 
   RowBox[{"(*", 
    RowBox[{"genWalkLE", "[", 
     RowBox[{"lattice", ",", " ", 
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{"{", "}"}], ",", " ", "all"}], "]"}], "*)"}], "\n", 
   RowBox[{"(*", "\n", 
    RowBox[{
     RowBox[{
      RowBox[{"SeedRandom", "[", 
       RowBox[{"Method", " ", "\[Rule]", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<ExtendedCA\>\"", ",", " ", 
          RowBox[{"\"\<Skip\>\"", " ", "\[Rule]", " ", "8"}]}], "}"}]}], 
       "]"}], "\n", "nLE"}], " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"PropertyValue", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"lattice", ",", 
           RowBox[{"{", "}"}]}], "}"}], ",", " ", "LEF"}], "]"}], "\n", 
       "iterations"}], " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{"Sum", "[", 
          RowBox[{
           RowBox[{"nLE", "/", "\[Kappa]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"\[Kappa]", ",", "1", ",", "nLE"}], "}"}]}], "]"}], "]"}],
         "\n", "all"}], " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"genRandLE", "[", "lattice", "]"}], ",", " ", 
           RowBox[{"{", "iterations", "}"}]}], "]"}], "\n", "uniq"}], " ", 
        "=", " ", 
        RowBox[{
         RowBox[{"DeleteDuplicates", "[", "all", "]"}], "\n", 
         RowBox[{"Length", "[", "uniq", "]"}]}]}]}]}]}], "\n", "*)"}], "\n", 
   "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"discover", "[", 
      RowBox[{"u_", ",", "v_", ",", "d_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Print", "[", 
      RowBox[{"v", " ", "\[DirectedEdge]", " ", "u"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"visited", "[", 
      RowBox[{"u_", ",", "v_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Print", "[", 
      RowBox[{"v", " ", "\[DirectedEdge]", " ", "u"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"backedge", "[", "uv_", "]"}], " ", ":=", " ", 
    RowBox[{"Print", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Fwd\>\"", ",", "uv"}], "}"}], "]"}]}], "\n", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Mean", "@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"VertexOutDegree", "[", 
          RowBox[{"lattice", ",", "#"}], "]"}], "&"}], ",", 
        RowBox[{"VertexList", "[", "lattice", "]"}]}], "]"}]}], ")"}], "^", 
    "11"}], "\n", "\n", 
   RowBox[{
    RowBox[{"VertexCount", "[", "lattice", "]"}], "*", 
    RowBox[{"EdgeCount", "[", "lattice", "]"}]}], "\n", 
   RowBox[{
    RowBox[{"VertexCount", "[", "lattice", "]"}], "^", "2"}], "\n", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"VertexCount", "[", "lattice", "]"}], "*", "2"}], ")"}], "+", 
    RowBox[{"EdgeCount", "[", "lattice", "]"}]}], "\n", "\n", "\n", 
   RowBox[{
    RowBox[{"bitmask", "[", 
     RowBox[{"list_", ",", " ", "subset_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "f", "}"}], ",", "\n", "  ", 
      RowBox[{
       RowBox[{
        RowBox[{"f", "[", "_", "]"}], " ", "=", " ", "0"}], ";", "\n", "  ", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"f", "[", "#", "]"}], " ", "=", " ", "1"}], ")"}], "&"}], 
        " ", "/@", " ", "subset"}], ";", "\n", "  ", 
       RowBox[{"f", " ", "/@", " ", "list"}]}]}], "]"}]}], "\n", "\n", 
   RowBox[{
    RowBox[{"exportGraph", "[", "g_", "]"}], ":=", " ", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", "\n", "\t", 
       RowBox[{
        RowBox[{"maxOutDegree", " ", "=", " ", 
         RowBox[{"Max", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"VertexOutDegree", "[", 
              RowBox[{"g", ",", "#"}], "]"}], "&"}], ",", 
            RowBox[{"VertexList", "[", "g", "]"}]}], "]"}], "]"}]}], ",", 
        "\n", "\t", 
        RowBox[{"comboMax", "     ", "=", " ", 
         RowBox[{"Reverse", "@", 
          RowBox[{"First", "@", 
           RowBox[{"VertexList", "[", 
            RowBox[{"g", ",", 
             RowBox[{"_", "?", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"VertexOutDegree", "[", 
                  RowBox[{"g", ",", "#"}], "]"}], " ", "\[Equal]", " ", "0"}],
                 "&"}], ")"}]}]}], "]"}]}]}]}]}], "}"}], ",", "\n", "\t", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", "\n", "\t\t", 
            RowBox[{
             RowBox[{"label", " ", "=", " ", 
              RowBox[{"FromDigits", "[", 
               RowBox[{
                RowBox[{"bitmask", "[", 
                 RowBox[{"comboMax", ",", " ", 
                  RowBox[{"Reverse", "[", "#", "]"}]}], "]"}], ",", " ", 
                "2"}], "]"}]}], ",", "\n", "\t\t", 
             RowBox[{"edges", " ", "=", " ", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{"\[Alpha]", " ", "\[Function]", " ", 
                 RowBox[{"VertexIndex", "[", 
                  RowBox[{"g", ",", " ", "\[Alpha]"}], "]"}]}], ",", " ", 
                RowBox[{"imSucc", "[", 
                 RowBox[{"g", ",", "#"}], "]"}]}], "]"}]}]}], "}"}], ",", 
           "\n", "\t\t", 
           RowBox[{"{", 
            RowBox[{"label", ",", 
             RowBox[{"PadRight", "[", 
              RowBox[{"edges", ",", "maxOutDegree"}], "]"}], ",", "0", ",", 
             "0"}], "}"}]}], "\n", "\n", "\t\t", "]"}], "&"}], ",", " ", 
        RowBox[{"VertexList", "[", "g", "]"}]}], "]"}]}], "\n", "]"}]}], "\n", 
   RowBox[{
    RowBox[{"test", " ", "=", " ", 
     RowBox[{"idealLattice", "[", 
      RowBox[{"System`Graph", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[DirectedEdge]", "2"}], ",", 
         RowBox[{"3", "\[DirectedEdge]", "2"}], ",", 
         RowBox[{"4", "\[DirectedEdge]", "3"}], ",", 
         RowBox[{"5", "\[DirectedEdge]", "6"}], ",", 
         RowBox[{"7", "\[DirectedEdge]", "6"}], ",", 
         RowBox[{"8", "\[DirectedEdge]", "9"}]}], "}"}], "]"}], "]"}]}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"test", " ", "=", " ", "lattice"}], ";"}], "\n", 
   RowBox[{"idealLatticeLECount", "[", "test", "]"}], "\n", 
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"exportGraph", "[", "test", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "0", ",", "0"}], "}"}]}], "]"}], 
   "\n", "\n", 
   RowBox[{"(*", "\n", 
    RowBox[{
     RowBox[{"DepthFirstScan", "[", 
      RowBox[{"lattice", ",", " ", 
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<PrevisitVertex\>\"", " ", "\[Rule]", " ", "Print"}], 
        "}"}]}], "]"}], "\n", 
     RowBox[{"DepthFirstScan", "[", 
      RowBox[{"lattice", ",", " ", 
       RowBox[{"{", "}"}], ",", " ", 
       RowBox[{"{", "\n", "\t", 
        RowBox[{
         RowBox[{"\"\<DiscoverVertex\>\"", " ", "\[Rule]", " ", "discover"}], 
         ",", " ", "\n", "\t", 
         RowBox[{"\"\<UnvisitedVertex\>\"", " ", "\[Rule]", " ", "visited"}], 
         ",", "\n", "\t", 
         RowBox[{"\"\<VisitedVertex\>\"", " ", "\[Rule]", " ", "visited"}]}], 
        "}"}]}], "]"}]}], "*)"}], "\n", "\n", 
   RowBox[{"(*", "\n", 
    RowBox[{
     RowBox[{"DepthFirstScan", "[", 
      RowBox[{"lattice", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<DiscoverVertex\>\"", " ", "\[Rule]", " ", "discover"}], 
        "}"}]}], "]"}], "\n", 
     RowBox[{"DepthFirstScan", "[", 
      RowBox[{"lattice", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<UnvisitedVertex\>\"", " ", "\[Rule]", " ", "visited"}], 
        "}"}]}], "]"}], "\n", 
     RowBox[{"DepthFirstScan", "[", 
      RowBox[{"lattice", ",", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<VisitedVertex\>\"", " ", "\[Rule]", " ", "visited"}], 
        "}"}]}], "]"}]}], "*)"}], "\n"}]}]], "Code",
 CellChangeTimes->{{3.589459098714138*^9, 3.589459331068889*^9}, {
   3.5894593621648645`*^9, 3.589459366549426*^9}, {3.589459476248473*^9, 
   3.5894595104528484`*^9}, {3.5894595736049333`*^9, 3.589459581045885*^9}, {
   3.5894597780611076`*^9, 3.5894599364793897`*^9}, {3.589459992031505*^9, 
   3.5894603407691464`*^9}, {3.5894658232300076`*^9, 
   3.5894658447027617`*^9}, {3.5894659044024053`*^9, 
   3.5894659451036105`*^9}, {3.589466017622899*^9, 3.5894661955706806`*^9}, {
   3.589466267347865*^9, 3.589466284799103*^9}, {3.589467283458946*^9, 
   3.5894673770809307`*^9}, {3.589467433449153*^9, 3.5894675012208285`*^9}, {
   3.589472862446166*^9, 3.5894728627502093`*^9}, {3.589520301283266*^9, 
   3.589520310043394*^9}, {3.589524450249421*^9, 3.5895245055925007`*^9}, {
   3.5895245771126623`*^9, 3.589524620470213*^9}, {3.589524910409325*^9, 
   3.589524946837994*^9}, 3.5895249878082395`*^9, {3.5895250937538023`*^9, 
   3.589525107201518*^9}, {3.589525837153967*^9, 3.5895258754178653`*^9}, {
   3.589525925490281*^9, 3.589525951425596*^9}, {3.589526034978292*^9, 
   3.58952607960401*^9}, {3.589526141867982*^9, 3.5895262962037344`*^9}, {
   3.5895263372439938`*^9, 3.5895263378920765`*^9}, {3.5895266128122654`*^9, 
   3.589526787725659*^9}, {3.589526827293724*^9, 3.5895270779818172`*^9}, {
   3.589527117950934*^9, 3.589527358877777*^9}, {3.589527459162616*^9, 
   3.5895274986706734`*^9}, {3.5895276350671344`*^9, 
   3.5895276593872538`*^9}, {3.5895277094196587`*^9, 
   3.5895277099357247`*^9}, {3.5895277486726794`*^9, 
   3.5895277723077106`*^9}, {3.5895288339476147`*^9, 3.589528843162795*^9}, {
   3.5895289103273983`*^9, 3.5895289326002502`*^9}, {3.5895289837658*^9, 
   3.5895289895775385`*^9}, {3.589529022105708*^9, 3.58952910944989*^9}, {
   3.589529183155326*^9, 3.589529203194886*^9}, {3.589529254405442*^9, 
   3.5895294158021097`*^9}, {3.5895295287785673`*^9, 
   3.5895295300737324`*^9}, {3.5896345186183257`*^9, 3.589634524940134*^9}, {
   3.5896912270601172`*^9, 3.5896912881579447`*^9}, {3.5896913510449896`*^9, 
   3.589691429201996*^9}, {3.58969149332121*^9, 3.5896915185944448`*^9}, {
   3.5896918735388794`*^9, 3.5896918744269986`*^9}, {3.589691962042209*^9, 
   3.5896919707223263`*^9}, {3.589692014400918*^9, 3.5896920487823195`*^9}, {
   3.5896920839518175`*^9, 3.5896920903826447`*^9}, {3.5896921257391715`*^9, 
   3.58969212705834*^9}, {3.5896929739647613`*^9, 3.5896930425235324`*^9}, {
   3.589693080254368*^9, 3.589693149299202*^9}, {3.5896936097531495`*^9, 
   3.589693618340248*^9}, {3.589694823566541*^9, 3.589694887662751*^9}, {
   3.589694925016528*^9, 3.5896949649666433`*^9}, {3.5896972186011515`*^9, 
   3.589697226401154*^9}, {3.5896972691396217`*^9, 3.589697343548148*^9}, {
   3.5896973883378873`*^9, 3.5896974356999454`*^9}, {3.58969759977995*^9, 
   3.5896977100280647`*^9}, {3.589697787852033*^9, 3.5896977904273624`*^9}, {
   3.5896978234105854`*^9, 3.5896981566222377`*^9}, {3.589700952309145*^9, 
   3.589700971769636*^9}, {3.5897010025655785`*^9, 3.589701028499899*^9}, {
   3.589701112841691*^9, 3.5897011786661234`*^9}, {3.5897017496692176`*^9, 
   3.5897017573392*^9}, {3.589701950819969*^9, 3.589702043186794*^9}, {
   3.5897079496209326`*^9, 3.5897079855465326`*^9}, 3.5897401953560195`*^9, {
   3.5897402441342635`*^9, 3.589740257801014*^9}, {3.589740295694865*^9, 
   3.589740316463524*^9}, {3.5897403489306855`*^9, 3.5897403536492834`*^9}, {
   3.589740411219655*^9, 3.5897404640474167`*^9}, {3.5897405861870537`*^9, 
   3.5897405864910917`*^9}, 3.5897411937718363`*^9, {3.589896297022484*^9, 
   3.5898962999468584`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Print",
 CellChangeTimes->{{3.5897403095556393`*^9, 3.589740319218877*^9}, 
   3.5897403543053684`*^9, 3.589740465714631*^9, 3.58974058693015*^9, 
   3.589741216261716*^9, 3.5898963016420755`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3", ",", "5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "4", ",", "3", ",", "5"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5897403095616407`*^9, 3.58974031923588*^9}, 
   3.5897403543123693`*^9, 3.5897404657296333`*^9, 3.58974058693915*^9, 
   3.5897412162767177`*^9, 3.5898963017670856`*^9}],

Cell[BoxData[
 FractionBox["8649755859375", "285311670611"]], "Output",
 CellChangeTimes->{{3.5897403095616407`*^9, 3.58974031923588*^9}, 
   3.5897403543123693`*^9, 3.5897404657296333`*^9, 3.58974058693915*^9, 
   3.5897412162767177`*^9, 3.5898963018140917`*^9}],

Cell[BoxData["165"], "Output",
 CellChangeTimes->{{3.5897403095616407`*^9, 3.58974031923588*^9}, 
   3.5897403543123693`*^9, 3.5897404657296333`*^9, 3.58974058693915*^9, 
   3.5897412162767177`*^9, 3.5898963018160925`*^9}],

Cell[BoxData["121"], "Output",
 CellChangeTimes->{{3.5897403095616407`*^9, 3.58974031923588*^9}, 
   3.5897403543123693`*^9, 3.5897404657296333`*^9, 3.58974058693915*^9, 
   3.5897412162767177`*^9, 3.5898963018190947`*^9}],

Cell[BoxData["37"], "Output",
 CellChangeTimes->{{3.5897403095616407`*^9, 3.58974031923588*^9}, 
   3.5897403543123693`*^9, 3.5897404657296333`*^9, 3.58974058693915*^9, 
   3.5897412162767177`*^9, 3.589896301824093*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Print",
 CellChangeTimes->{{3.5897403095556393`*^9, 3.589740319218877*^9}, 
   3.5897403543053684`*^9, 3.589740465714631*^9, 3.58974058693015*^9, 
   3.589741216261716*^9, 3.5898963018711042`*^9}],

Cell[BoxData["9"], "Output",
 CellChangeTimes->{{3.5897403095616407`*^9, 3.58974031923588*^9}, 
   3.5897403543123693`*^9, 3.5897404657296333`*^9, 3.58974058693915*^9, 
   3.5897412162767177`*^9, 3.589896301887107*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "5"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "0"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "7"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "8"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "10"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "0"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"21", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "0"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"15", ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "0"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"23", ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "0"}], "}"}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"31", ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", "0", ",", "0"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5897403095616407`*^9, 3.58974031923588*^9}, 
   3.5897403543123693`*^9, 3.5897404657296333`*^9, 3.58974058693915*^9, 
   3.5897412162767177`*^9, 3.5898963019051037`*^9}]
}, Open  ]]
},
WindowSize->{786, 652},
WindowMargins->{{Automatic, 0}, {127, Automatic}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 76015, 1255, 533, "Text"],
Cell[CellGroupData[{
Cell[76597, 1279, 15206, 321, 1013, "Code"],
Cell[91806, 1602, 19074, 441, 337, "Output"]
}, Open  ]],
Cell[110895, 2046, 65598, 1080, 484, "Text"],
Cell[CellGroupData[{
Cell[176518, 3130, 14796, 329, 913, "Code"],
Cell[191317, 3461, 494, 8, 23, "Print"],
Cell[191814, 3471, 795, 11, 31, "Output"],
Cell[192612, 3484, 517, 9, 23, "Print"],
Cell[193132, 3495, 19291, 420, 447, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212460, 3920, 538, 13, 52, "Input"],
Cell[213001, 3935, 1572, 44, 92, "Output"],
Cell[214576, 3981, 201, 3, 31, "Output"]
}, Open  ]],
Cell[214792, 3987, 604, 15, 201, "Text"],
Cell[CellGroupData[{
Cell[215421, 4006, 15934, 372, 1653, "Code"],
Cell[231358, 4380, 291, 5, 23, "Print"],
Cell[231652, 4387, 1049, 24, 52, "Output"],
Cell[232704, 4413, 263, 4, 46, "Output"],
Cell[232970, 4419, 222, 3, 31, "Output"],
Cell[233195, 4424, 222, 3, 31, "Output"],
Cell[233420, 4429, 219, 3, 31, "Output"],
Cell[233642, 4434, 291, 5, 23, "Print"],
Cell[233936, 4441, 218, 3, 31, "Output"],
Cell[234157, 4446, 1841, 54, 72, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
